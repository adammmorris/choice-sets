m2 = mlogit(Choice ~ log(Total) | -1, df.logit2)
summary(m2)
df.logit2 = mlogit.data(df.logit %>% filter(Condition == 'normal'), choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m2 = mlogit(Choice ~ Total | -1, df.logit2)
summary(m2)
df.logit2 = mlogit.data(df.logit %>% filter(Condition == 'reversed'), choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m2 = mlogit(Choice ~ Total | -1, df.logit2)
summary(m2)
#df.test = df.logit %>% group_by(Condition, Total, Subj) %>% summarize(Choice = any(Choice)) %>% group_by(Condition, Total) %>% summarize(Choice = mean(Choice))
test.cs = lm(Choice.cs ~ exp(Total) * Cond, data = df.graph2)
summary(test.cs)
#df.test = df.logit %>% group_by(Condition, Total, Subj) %>% summarize(Choice = any(Choice)) %>% group_by(Condition, Total) %>% summarize(Choice = mean(Choice))
test.cs = lm(Choice.cs ~ Total * Cond, data = df.graph2)
summary(test.cs)
#df.test = df.logit %>% group_by(Condition, Total, Subj) %>% summarize(Choice = any(Choice)) %>% group_by(Condition, Total) %>% summarize(Choice = mean(Choice))
test.cs = lm(Choice.cs ~ exp(Total) * Cond, data = df.graph2)
summary(test.cs)
optim(c(1,1), function(x) {fn(x, df.graph2 %>% filter(Cond == 0)) + fn(x, df.graph2 %>% filter(Cond == 1))},
method = 'L-BFGS-B', lower = c(0,0), upper = c(10,10))
fn = function(x, df) {
ss = 0
denom = sum(exp(x[1] * df$MFval / 15 + x[2] * df$MBval / 22))
for (i in 1:nrow(df)) {
ss = ss + (df$Real[i] - (exp(x[1] * df$MFval[i] / 15 + x[2] * df$MBval[i] / 22) / denom)) ^ 2
}
return(ss)
}
fn.cs = function(x, df) {
ss = 0
#denom = sum(exp(x[1] * df$MFval / 15 + x[2] * df$MBval / 22))
for (i in 1:nrow(df)) {
ss = ss + (df$Real[i] - getProb(i,df$MFval, x[1], df$MBval, x[2], 4)) ^ 2
}
return(ss)
}
optim(c(1,1), function(x) {fn(x, df.graph2 %>% filter(Cond == 0)) + fn(x, df.graph2 %>% filter(Cond == 1))},
method = 'L-BFGS-B', lower = c(0,0), upper = c(10,10))
getProb = function(word_ind, x1, b1, x2, b2, k) {
probs1 = exp(b1 * x1 / max(x1)) / sum(exp(b1 * x1 / max(x1)))
words = 1:length(probs1)
sets = t(combn(words[-word_ind], k-1))
sets = cbind(sets, rep(word_ind, nrow(sets)))
prob = 0
for (set_ind in 1:nrow(sets)) {
set = sets[set_ind,]
pset = powerSet(set)
complement = sum(probs1[setdiff(words, set)])
temp_prob = vector(mode = "numeric", length = length(pset))
for (subset_ind in 1:length(pset)) {
subset = pset[[subset_ind]]
temp_prob[subset_ind] = (-1) ^ length(subset) / (1 + sum(probs1[subset]) / complement)
}
set_prob = sum(temp_prob)
probs2 = exp(b2 * x2[set] / max(x2[set])) / sum(exp(b2 * x2[set] / max(x2[set])))
prob = prob + probs2[k] * set_prob
}
return(prob)
}
getProb.mix = function(word_ind, x1, b1, x2, b2) {
probs = exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)) / sum(exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)))
return(probs[word_ind])
}
b1 = 1.5
b2 = 10
k = 4
# s1 = c(1,  1,  3,  3,  3,  4,  6,  6,  7,  10, 14, 15)
# s2 = c(12, 22, 21, 12, 14, 18, 15, 9, 11,  7,  5,  6)
# s1 = c(3, 10, 6, 15, 7, 14, 3, 4, 3, 1, 1, 6)
# s2 = c(21, 7, 15, 6, 11, 5, 13, 18, 14, 12, 22, 9)
#
s1 = c(1, 1, 3, 3, 3, 4, 6, 6, 7, 10, 14, 15)
s2 = c(12, 22, 21, 13, 14, 18, 15, 9, 11, 7, 5, 6)
s1_rev = max(s1) + 1 - s1
df.real = df.logit %>%
group_by(Condition, MFval,MBval,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFval,MBval) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
df.graph2 = data.frame()
for (word_ind in 1:numWords) {
df.graph2 = rbind(df.graph2, data.frame(MFval = s1[word_ind], MFhigh = factor(s1[word_ind] > median(s1), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]]))
df.graph2 = rbind(df.graph2, data.frame(MFval = s1_rev[word_ind], MFhigh = factor(s1_rev[word_ind] > median(s1_rev), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1_rev, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1_rev, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]]))
}
df.graph2 = df.graph2 %>% mutate(Total = b1 * MFval / max(s1) + b2 * MBval / max(s2))
optim(c(1,1), function(x) {fn(x, df.graph2 %>% filter(Cond == 0)) + fn(x, df.graph2 %>% filter(Cond == 1))},
method = 'L-BFGS-B', lower = c(0,0), upper = c(10,10))
fn(c(1,1), df.graph2)
optim(c(1,1), function(x) {fn(x, df.graph2 %>% filter(Cond == 'normal')) + fn(x, df.graph2 %>% filter(Cond == 'reversed'))},
method = 'L-BFGS-B', lower = c(0,0), upper = c(10,10))
optim(c(1,1), function(x) {fn.cs(x, df.graph2 %>% filter(Cond == 'normal')) + fn.cs(x, df.graph2 %>% filter(Cond == 'reversed'))},
method = 'L-BFGS-B', lower = c(0,0), upper = c(10,10))
df.graph = df.logit %>% mutate(MFhigh = MFval, MBhigh = MBval) %>%
group_by(Condition, MFhigh,MBhigh,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFhigh,MBhigh) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
ggplot(data = df.graph, aes(x = MBhigh, y = Choice.mean, group = MFhigh, colour = MFhigh)) +
geom_point(aes(size = 2)) + geom_line() +
#geom_smooth(method='lm', formula = y ~ poly(x,3)) +
#geom_smooth() +
geom_errorbar(aes(ymin=Choice.mean - Choice.se, ymax = Choice.mean + Choice.se), width = .2) +
guides(size = FALSE) + facet_wrap(~ Condition)
df.graph = df.logit %>% mutate(MFhigh = MFhigh, MBhigh = MBval) %>%
group_by(Condition, MFhigh,MBhigh,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFhigh,MBhigh) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
ggplot(data = df.graph, aes(x = MBhigh, y = Choice.mean, group = MFhigh, colour = MFhigh)) +
geom_point(aes(size = 2)) + geom_line() +
#geom_smooth(method='lm', formula = y ~ poly(x,3)) +
#geom_smooth() +
geom_errorbar(aes(ymin=Choice.mean - Choice.se, ymax = Choice.mean + Choice.se), width = .2) +
guides(size = FALSE) #+ facet_wrap(~ Condition)
optim(c(1,1), function(x) {fn.cs(x, df.graph2 %>% filter(Cond == 'reversed'))},
method = 'L-BFGS-B', lower = c(0,0), upper = c(10,10))
getProb = function(word_ind, x1, b1, x2, b2, k) {
probs1 = exp(b1 * x1 / max(x1)) / sum(exp(b1 * x1 / max(x1)))
words = 1:length(probs1)
sets = t(combn(words[-word_ind], k-1))
sets = cbind(sets, rep(word_ind, nrow(sets)))
prob = 0
for (set_ind in 1:nrow(sets)) {
set = sets[set_ind,]
pset = powerSet(set)
complement = sum(probs1[setdiff(words, set)])
temp_prob = vector(mode = "numeric", length = length(pset))
for (subset_ind in 1:length(pset)) {
subset = pset[[subset_ind]]
temp_prob[subset_ind] = (-1) ^ length(subset) / (1 + sum(probs1[subset]) / complement)
}
set_prob = sum(temp_prob)
probs2 = exp(b2 * x2[set] / max(x2[set])) / sum(exp(b2 * x2[set] / max(x2[set])))
prob = prob + probs2[k] * set_prob
}
return(prob)
}
getProb.mix = function(word_ind, x1, b1, x2, b2) {
probs = exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)) / sum(exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)))
return(probs[word_ind])
}
b1 = 2
b2 = 5
k = 4
# s1 = c(1,  1,  3,  3,  3,  4,  6,  6,  7,  10, 14, 15)
# s2 = c(12, 22, 21, 12, 14, 18, 15, 9, 11,  7,  5,  6)
# s1 = c(3, 10, 6, 15, 7, 14, 3, 4, 3, 1, 1, 6)
# s2 = c(21, 7, 15, 6, 11, 5, 13, 18, 14, 12, 22, 9)
#
s1 = c(1, 1, 3, 3, 3, 4, 6, 6, 7, 10, 14, 15)
s2 = c(12, 22, 21, 13, 14, 18, 15, 9, 11, 7, 5, 6)
s1_rev = max(s1) + 1 - s1
df.real = df.logit %>%
group_by(Condition, MFval,MBval,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFval,MBval) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
df.graph2 = data.frame()
for (word_ind in 1:numWords) {
df.graph2 = rbind(df.graph2, data.frame(MFval = s1[word_ind], MFhigh = factor(s1[word_ind] > median(s1), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]]))
df.graph2 = rbind(df.graph2, data.frame(MFval = s1_rev[word_ind], MFhigh = factor(s1_rev[word_ind] > median(s1_rev), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1_rev, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1_rev, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]]))
}
df.graph2 = df.graph2 %>% mutate(Total = b1 * MFval / max(s1) + b2 * MBval / max(s2))
ggplot(data = df.graph2 %>% mutate(Cond = factor(Cond)), aes(x = MBval)) +
geom_point(aes(y = Choice.mix, size = 2), shape = 16) + geom_line(aes(y = Choice.mix)) +
#geom_point(aes(y = Choice.cs, size = 2), shape = 16) + geom_line(aes(y = Choice.cs)) +
#geom_point(aes(y = Real, size = 2), shape = 16) + geom_line(aes(y = Real)) +
#geom_errorbar(aes(ymin=Real - Real.se, ymax = Real + Real.se), width = .2) +
#geom_smooth(method='lm', aes(y = Real), formula = y ~ exp(x)) +
guides(size = FALSE) + facet_wrap(~ Cond)
ggplot(data = df.graph2 %>% mutate(Cond = factor(Cond)), aes(x = MBval)) +
#geom_point(aes(y = Choice.mix, size = 2), shape = 16) + geom_line(aes(y = Choice.mix)) +
geom_point(aes(y = Choice.cs, size = 2), shape = 16) + geom_line(aes(y = Choice.cs)) +
#geom_point(aes(y = Real, size = 2), shape = 16) + geom_line(aes(y = Real)) +
#geom_errorbar(aes(ymin=Real - Real.se, ymax = Real + Real.se), width = .2) +
#geom_smooth(method='lm', aes(y = Real), formula = y ~ exp(x)) +
guides(size = FALSE) + facet_wrap(~ Cond)
ggplot(data = df.graph2 %>% mutate(Cond = factor(Cond)), aes(x = MBval)) +
geom_point(aes(y = Choice.mix, size = 2), shape = 16) + geom_line(aes(y = Choice.mix)) +
#geom_point(aes(y = Choice.cs, size = 2), shape = 16) + geom_line(aes(y = Choice.cs)) +
#geom_point(aes(y = Real, size = 2), shape = 16) + geom_line(aes(y = Real)) +
#geom_errorbar(aes(ymin=Real - Real.se, ymax = Real + Real.se), width = .2) +
#geom_smooth(method='lm', aes(y = Real), formula = y ~ exp(x)) +
guides(size = FALSE) + facet_wrap(~ Cond)
#df.test = df.logit %>% group_by(Condition, Total, Subj) %>% summarize(Choice = any(Choice)) %>% group_by(Condition, Total) %>% summarize(Choice = mean(Choice))
test.cs = lm(Choice.cs ~ exp(Total) * Cond, data = df.graph2)
summary(test.cs)
#df.test = df.logit %>% group_by(Condition, Total, Subj) %>% summarize(Choice = any(Choice)) %>% group_by(Condition, Total) %>% summarize(Choice = mean(Choice))
test.cs = lm(Choice.mix ~ exp(Total) * Cond, data = df.graph2)
summary(test.cs)
getProb = function(word_ind, x1, b1, x2, b2, k) {
probs1 = exp(b1 * x1 / max(x1)) / sum(exp(b1 * x1 / max(x1)))
words = 1:length(probs1)
sets = t(combn(words[-word_ind], k-1))
sets = cbind(sets, rep(word_ind, nrow(sets)))
prob = 0
for (set_ind in 1:nrow(sets)) {
set = sets[set_ind,]
pset = powerSet(set)
complement = sum(probs1[setdiff(words, set)])
temp_prob = vector(mode = "numeric", length = length(pset))
for (subset_ind in 1:length(pset)) {
subset = pset[[subset_ind]]
temp_prob[subset_ind] = (-1) ^ length(subset) / (1 + sum(probs1[subset]) / complement)
}
set_prob = sum(temp_prob)
probs2 = exp(b2 * x2[set] / max(x2[set])) / sum(exp(b2 * x2[set] / max(x2[set])))
prob = prob + probs2[k] * set_prob
}
return(prob)
}
getProb.mix = function(word_ind, x1, b1, x2, b2) {
probs = exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)) / sum(exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)))
return(probs[word_ind])
}
b1 = 2
b2 = 5
k = 4
# s1 = c(1,  1,  3,  3,  3,  4,  6,  6,  7,  10, 14, 15)
# s2 = c(12, 22, 21, 12, 14, 18, 15, 9, 11,  7,  5,  6)
# s1 = c(3, 10, 6, 15, 7, 14, 3, 4, 3, 1, 1, 6)
# s2 = c(21, 7, 15, 6, 11, 5, 13, 18, 14, 12, 22, 9)
#
# s1 = c(1, 1, 3, 3, 3, 4, 6, 6, 7, 10, 14, 15)
# s2 = c(12, 22, 21, 13, 14, 18, 15, 9, 11, 7, 5, 6)
s1 = c(2, 2, 2,  4,  6,  6,  7,  9, 10, 10, 11, 12)
s2 = c(24, 21, 19, 18, 16, 13, 12, 11,  8,  6,  4, 2)
s1_rev = max(s1) + 1 - s1
df.real = df.logit %>%
group_by(Condition, MFval,MBval,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFval,MBval) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
df.graph2 = data.frame()
for (word_ind in 1:numWords) {
df.graph2 = rbind(df.graph2, data.frame(MFval = s1[word_ind], MFhigh = factor(s1[word_ind] > median(s1), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]]))
df.graph2 = rbind(df.graph2, data.frame(MFval = s1_rev[word_ind], MFhigh = factor(s1_rev[word_ind] > median(s1_rev), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1_rev, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1_rev, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]]))
}
df.graph2 = df.graph2 %>% mutate(Total = b1 * MFval / max(s1) + b2 * MBval / max(s2))
ggplot(data = df.graph2 %>% mutate(Cond = factor(Cond)), aes(x = MBval)) +
geom_point(aes(y = Choice.mix, size = 2), shape = 16) + geom_line(aes(y = Choice.mix)) +
#geom_point(aes(y = Choice.cs, size = 2), shape = 16) + geom_line(aes(y = Choice.cs)) +
#geom_point(aes(y = Real, size = 2), shape = 16) + geom_line(aes(y = Real)) +
#geom_errorbar(aes(ymin=Real - Real.se, ymax = Real + Real.se), width = .2) +
#geom_smooth(method='lm', aes(y = Real), formula = y ~ exp(x)) +
guides(size = FALSE) + facet_wrap(~ Cond)
getProb = function(word_ind, x1, b1, x2, b2, k) {
probs1 = exp(b1 * x1 / max(x1)) / sum(exp(b1 * x1 / max(x1)))
words = 1:length(probs1)
sets = t(combn(words[-word_ind], k-1))
sets = cbind(sets, rep(word_ind, nrow(sets)))
prob = 0
for (set_ind in 1:nrow(sets)) {
set = sets[set_ind,]
pset = powerSet(set)
complement = sum(probs1[setdiff(words, set)])
temp_prob = vector(mode = "numeric", length = length(pset))
for (subset_ind in 1:length(pset)) {
subset = pset[[subset_ind]]
temp_prob[subset_ind] = (-1) ^ length(subset) / (1 + sum(probs1[subset]) / complement)
}
set_prob = sum(temp_prob)
probs2 = exp(b2 * x2[set] / max(x2[set])) / sum(exp(b2 * x2[set] / max(x2[set])))
prob = prob + probs2[k] * set_prob
}
return(prob)
}
getProb.mix = function(word_ind, x1, b1, x2, b2) {
probs = exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)) / sum(exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)))
return(probs[word_ind])
}
b1 = 2
b2 = 5
k = 4
# s1 = c(1,  1,  3,  3,  3,  4,  6,  6,  7,  10, 14, 15)
# s2 = c(12, 22, 21, 12, 14, 18, 15, 9, 11,  7,  5,  6)
# s1 = c(3, 10, 6, 15, 7, 14, 3, 4, 3, 1, 1, 6)
# s2 = c(21, 7, 15, 6, 11, 5, 13, 18, 14, 12, 22, 9)
#
# s1 = c(1, 1, 3, 3, 3, 4, 6, 6, 7, 10, 14, 15)
# s2 = c(12, 22, 21, 13, 14, 18, 15, 9, 11, 7, 5, 6)
s1 = c(2, 2, 2,  4,  6,  6,  7,  9, 10, 10, 11, 12)
s2 = c(24, 21, 19, 18, 16, 13, 12, 11,  8,  6,  4, 2)
s1_rev = max(s1) + 1 - s1
df.real = df.logit %>%
group_by(Condition, MFval,MBval,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFval,MBval) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
df.graph2 = data.frame()
for (word_ind in 1:numWords) {
df.graph2 = rbind(df.graph2, data.frame(MFval = s1[word_ind], MFhigh = factor(s1[word_ind] > median(s1), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]]))
df.graph2 = rbind(df.graph2, data.frame(MFval = s1_rev[word_ind], MFhigh = factor(s1_rev[word_ind] > median(s1_rev), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1_rev, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1_rev, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]]))
}
df.graph2 = df.graph2 %>% mutate(Total = b1 * MFval / max(s1) + b2 * MBval / max(s2))
ggplot(data = df.graph2 %>% mutate(Cond = factor(Cond)), aes(x = MBval)) +
geom_point(aes(y = Choice.mix, size = 2), shape = 16) + geom_line(aes(y = Choice.mix)) +
#geom_point(aes(y = Choice.cs, size = 2), shape = 16) + geom_line(aes(y = Choice.cs)) +
#geom_point(aes(y = Real, size = 2), shape = 16) + geom_line(aes(y = Real)) +
#geom_errorbar(aes(ymin=Real - Real.se, ymax = Real + Real.se), width = .2) +
#geom_smooth(method='lm', aes(y = Real), formula = y ~ exp(x)) +
guides(size = FALSE) + facet_wrap(~ Cond)
getProb = function(word_ind, x1, b1, x2, b2, k) {
probs1 = exp(b1 * x1 / max(x1)) / sum(exp(b1 * x1 / max(x1)))
words = 1:length(probs1)
sets = t(combn(words[-word_ind], k-1))
sets = cbind(sets, rep(word_ind, nrow(sets)))
prob = 0
for (set_ind in 1:nrow(sets)) {
set = sets[set_ind,]
pset = powerSet(set)
complement = sum(probs1[setdiff(words, set)])
temp_prob = vector(mode = "numeric", length = length(pset))
for (subset_ind in 1:length(pset)) {
subset = pset[[subset_ind]]
temp_prob[subset_ind] = (-1) ^ length(subset) / (1 + sum(probs1[subset]) / complement)
}
set_prob = sum(temp_prob)
probs2 = exp(b2 * x2[set] / max(x2[set])) / sum(exp(b2 * x2[set] / max(x2[set])))
prob = prob + probs2[k] * set_prob
}
return(prob)
}
getProb.mix = function(word_ind, x1, b1, x2, b2) {
probs = exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)) / sum(exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)))
return(probs[word_ind])
}
b1 = 2
b2 = 5
k = 4
# s1 = c(1,  1,  3,  3,  3,  4,  6,  6,  7,  10, 14, 15)
# s2 = c(12, 22, 21, 12, 14, 18, 15, 9, 11,  7,  5,  6)
# s1 = c(3, 10, 6, 15, 7, 14, 3, 4, 3, 1, 1, 6)
# s2 = c(21, 7, 15, 6, 11, 5, 13, 18, 14, 12, 22, 9)
#
# s1 = c(1, 1, 3, 3, 3, 4, 6, 6, 7, 10, 14, 15)
# s2 = c(12, 22, 21, 13, 14, 18, 15, 9, 11, 7, 5, 6)
s1 = c(2, 2, 2,  4,  6,  6,  7,  9, 10, 10, 11, 12)
s2 = c(24, 21, 19, 18, 16, 13, 12, 11,  8,  6,  4, 2)
s1_rev = max(s1) + 1 - s1
df.real = df.logit %>%
group_by(Condition, MFval,MBval,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFval,MBval) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
df.graph2 = data.frame()
for (word_ind in 1:numWords) {
df.graph2 = rbind(df.graph2, data.frame(MFval = s1[word_ind], MFhigh = factor(s1[word_ind] > median(s1), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]]))
df.graph2 = rbind(df.graph2, data.frame(MFval = s1_rev[word_ind], MFhigh = factor(s1_rev[word_ind] > median(s1_rev), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1_rev, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1_rev, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]]))
}
getProb(word_ind, s1, b1, s2, b2, k)
getProb.mix(word_ind, s1, b1, s2, b2)
getProb(word_ind, s1_rev, b1, s2, b2, k)
getProb.mix(word_ind, s1_rev, b1, s2, b2)
m = mlogit(Choice ~ MFhigh * MBval | -1, df.logit2)#, panel = T,
#rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
summary(m)
m = mlogit(Choice ~ MFval * MBval | -1, df.logit2)#, panel = T,
#rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
summary(m)
df.logit2 = mlogit.data(df.logit, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFval * MBval | -1, df.logit2)#, panel = T,
#rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
summary(m)
m = mlogit(Choice ~ MFhigh * MBval | -1, df.logit2)#, panel = T,
#rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
summary(m)
m = mlogit(Choice ~ MFval + MBval | -1, df.logit2)#, panel = T,
#rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
summary(m)
15 / 4
exp(.15)
exp(.046)
getProb = function(word_ind, x1, b1, x2, b2, k) {
probs1 = exp(b1 * x1 / max(x1)) / sum(exp(b1 * x1 / max(x1)))
words = 1:length(probs1)
sets = t(combn(words[-word_ind], k-1))
sets = cbind(sets, rep(word_ind, nrow(sets)))
prob = 0
for (set_ind in 1:nrow(sets)) {
set = sets[set_ind,]
pset = powerSet(set)
complement = sum(probs1[setdiff(words, set)])
temp_prob = vector(mode = "numeric", length = length(pset))
for (subset_ind in 1:length(pset)) {
subset = pset[[subset_ind]]
temp_prob[subset_ind] = (-1) ^ length(subset) / (1 + sum(probs1[subset]) / complement)
}
set_prob = sum(temp_prob)
probs2 = exp(b2 * x2[set] / max(x2[set])) / sum(exp(b2 * x2[set] / max(x2[set])))
prob = prob + probs2[k] * set_prob
}
return(prob)
}
getProb.mix = function(word_ind, x1, b1, x2, b2) {
probs = exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)) / sum(exp(b1 * x1 / max(x1) + b2 * x2 / max(x2)))
return(probs[word_ind])
}
b1 = .05
b2 = .16
k = 4
# s1 = c(1,  1,  3,  3,  3,  4,  6,  6,  7,  10, 14, 15)
# s2 = c(12, 22, 21, 12, 14, 18, 15, 9, 11,  7,  5,  6)
# s1 = c(3, 10, 6, 15, 7, 14, 3, 4, 3, 1, 1, 6)
# s2 = c(21, 7, 15, 6, 11, 5, 13, 18, 14, 12, 22, 9)
#
# s1 = c(1, 1, 3, 3, 3, 4, 6, 6, 7, 10, 14, 15)
# s2 = c(12, 22, 21, 13, 14, 18, 15, 9, 11, 7, 5, 6)
s1 = c(2, 2, 2,  4,  6,  6,  7,  9, 10, 10, 11, 12)
s2 = c(24, 21, 19, 18, 16, 13, 12, 11,  8,  6,  4, 2)
s1_rev = max(s1) + 1 - s1
df.real = df.logit %>%
group_by(Condition, MFval,MBval,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFval,MBval) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
df.graph2 = data.frame()
for (word_ind in 1:numWords) {
df.graph2 = rbind(df.graph2, data.frame(MFval = s1[word_ind], MFhigh = factor(s1[word_ind] > median(s1), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]]))
df.graph2 = rbind(df.graph2, data.frame(MFval = s1_rev[word_ind], MFhigh = factor(s1_rev[word_ind] > median(s1_rev), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1_rev, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1_rev, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]]))
}
df.graph2 = df.graph2 %>% mutate(Total = b1 * MFval / max(s1) + b2 * MBval / max(s2))
ggplot(data = df.graph2 %>% mutate(Cond = factor(Cond)), aes(x = MBval)) +
geom_point(aes(y = Choice.mix, size = 2), shape = 16) + geom_line(aes(y = Choice.mix)) +
#geom_point(aes(y = Choice.cs, size = 2), shape = 16) + geom_line(aes(y = Choice.cs)) +
#geom_point(aes(y = Real, size = 2), shape = 16) + geom_line(aes(y = Real)) +
#geom_errorbar(aes(ymin=Real - Real.se, ymax = Real + Real.se), width = .2) +
#geom_smooth(method='lm', aes(y = Real), formula = y ~ exp(x)) +
guides(size = FALSE) + facet_wrap(~ Cond)
b1 = .05
b2 = .16
k = 4
# s1 = c(1,  1,  3,  3,  3,  4,  6,  6,  7,  10, 14, 15)
# s2 = c(12, 22, 21, 12, 14, 18, 15, 9, 11,  7,  5,  6)
# s1 = c(3, 10, 6, 15, 7, 14, 3, 4, 3, 1, 1, 6)
# s2 = c(21, 7, 15, 6, 11, 5, 13, 18, 14, 12, 22, 9)
#
s1 = c(1, 1, 3, 3, 3, 4, 6, 6, 7, 10, 14, 15)
s2 = c(12, 22, 21, 13, 14, 18, 15, 9, 11, 7, 5, 6)
s1_rev = max(s1) + 1 - s1
df.real = df.logit %>%
group_by(Condition, MFval,MBval,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(Condition, MFval,MBval) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
df.graph2 = data.frame()
for (word_ind in 1:numWords) {
df.graph2 = rbind(df.graph2, data.frame(MFval = s1[word_ind], MFhigh = factor(s1[word_ind] > median(s1), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1[word_ind] & df.real$MBval == s2[word_ind]]))
df.graph2 = rbind(df.graph2, data.frame(MFval = s1_rev[word_ind], MFhigh = factor(s1_rev[word_ind] > median(s1_rev), c(T,F), c('high', 'low')), MBval = s2[word_ind],
Choice.cs = getProb(word_ind, s1_rev, b1, s2, b2, k), Choice.mix = getProb.mix(word_ind, s1_rev, b1, s2, b2),
Real = df.real$Choice.mean[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Real.se = df.real$Choice.se[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]],
Cond = df.real$Condition[df.real$MFval == s1_rev[word_ind] & df.real$MBval == s2[word_ind]]))
}
df.graph2 = df.graph2 %>% mutate(Total = b1 * MFval / max(s1) + b2 * MBval / max(s2))
ggplot(data = df.graph2 %>% mutate(Cond = factor(Cond)), aes(x = MBval)) +
geom_point(aes(y = Choice.mix, size = 2), shape = 16) + geom_line(aes(y = Choice.mix)) +
#geom_point(aes(y = Choice.cs, size = 2), shape = 16) + geom_line(aes(y = Choice.cs)) +
#geom_point(aes(y = Real, size = 2), shape = 16) + geom_line(aes(y = Real)) +
#geom_errorbar(aes(ymin=Real - Real.se, ymax = Real + Real.se), width = .2) +
#geom_smooth(method='lm', aes(y = Real), formula = y ~ exp(x)) +
guides(size = FALSE) + facet_wrap(~ Cond)
gghistostats(df.s2.filt, rank_s1value, test.value = 6.5, centrality.para = 'median', type = 'np')
summary(lm(rank_s1value ~ 1, df.s2.filt))
summary(lm(rank_s1value - 6.5 ~ 1, df.s2.filt))
gghistostats(df.s2.filt, rank_s1value, test.value = 6.5, centrality.para = 'median', type = 'p')
summary(lm(rank_s1value - 6.5 ~ 1 + s2_value, df.s2.filt))
summary(lm(rank_s1value - 6.5 ~ 1 + rank_s2value, df.s2.filt))
summary(lm(rank_s1value - 6.5 ~ 1 + s2_value, df.s2.filt))
View(df.s2.filt)
