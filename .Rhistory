df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
df.s2.temp.mem = df.s2.temp %>% filter(question == 'Memory')
words_temp = trimws(as.string.vector(df.s2.temp.mem$choice))
val_temp = as.numeric(trimws(as.string.vector(df.s2.temp.mem$scratch)))
val_temp[is.na(val_temp)] = -99
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
if (recalled[i,j]) {
true_val = df.words.temp$s1_value[df.words.temp$word_ind == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 1
}
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
include_rows = NULL
include_names = NULL
for (subj in 1:length(subjlist)) {
subj.name = subjlist[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.excl %>% filter(subject == subj.name)
df.demo.temp = df.demo %>% filter(subject == subj.name)
exclude = df.demo.temp$write_down == 'Yes' || df.s2.subj.temp$comp_check_pass < 1 ||
df.s2.subj.temp$numNAs > minNAs || sum(recalled[subj,]) < 5 || df.s2.subj.temp$numTrials != numQuestions ||
df.s1.subj.temp$numTrials != numTrials || df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctCorrect_val < .75 ||
df.s1.subj.temp$pctCorrect_choice < .75 || df.s2$cond[df.s2$subject == subj.name] == 'normal'
if (exclude) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
# data manip --------------------------------------------------------------
## words
for (i in 1:nrow(df.words)) {
subj = df.words$subject[i]
s1_valuelist = (df.words %>% filter(subject == subj))$s1_value
s1_valuelist_rank = rank(s1_valuelist, ties.method = 'max')
s1_valuelist_indiv = (df.words %>% filter(subject == subj & recall.ever == 1))$s1_value
df.words$high_s1value[i] = df.words$s1_value[i] > median(s1_valuelist)
df.words$rank_s1value[i] = s1_valuelist_rank[df.words$word_ind[i] + 1]
df.words$high_s1value_indiv[i] = df.words$s1_value[i] > median(s1_valuelist_indiv)
s2_valuelist = (df.words %>% filter(subject == subj))$s2_value
s2_valuelist_rank = rank(s2_valuelist, ties.method = 'max')
s2_valuelist_indiv = (df.words %>% filter(subject == subj & recall.ever == 1))$s2_value
df.words$high_s2value[i] = df.words$s2_value[i] > median(s2_valuelist)
df.words$rank_s2value[i] = s2_valuelist_rank[df.words$word_ind[i] + 1]
df.words$high_s2value_indiv[i] = df.words$s2_value[i] > median(s2_valuelist_indiv)
}
## s2
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
cind = df.s2$choice_real_ind[i]
creal = df.s2$choice_real[i]
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$s1_value[word_rows])
df.s2$high_s1value[i] = ifelse(is.na(cind), NA, df.words$high_s1value[word_rows])
df.s2$high_s1value_indiv[i] = ifelse(is.na(cind), NA, df.words$high_s1value_indiv[word_rows])
df.s2$rank_s1value[i] = ifelse(is.na(cind), NA, df.words$rank_s1value[word_rows])
df.s2$s2_value[i] = ifelse(is.na(cind), NA, df.words$s2_value[word_rows])
df.s2$high_s2value[i] = ifelse(is.na(cind), NA, df.words$high_s2value[word_rows])
df.s2$high_s2value_indiv[i] = ifelse(is.na(cind), NA, df.words$high_s2value_indiv[word_rows])
df.s2$rank_s2value[i] = ifelse(is.na(cind), NA, df.words$rank_s2value[word_rows])
s2_valuelist = (df.words %>% filter(subject == subj.name))$s2_value
df.s2$median_value[i] = median(s2_valuelist)
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # just for modeling
bonus_value = ifelse(is.na(choice_real_ind), 0, s2_value))
df.s2.filt = df.s2 %>% filter(subject %in% include_names & question_order == 0)
df.words.filt = df.words %>% filter(subject %in% include_names)
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words.filt %>% filter(subject == subj.name)
df.s2.temp = df.s2.filt %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
Condition.col = rep(df.s2.temp$cond, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$s1_value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_s1value_indiv[recalled.temp] * 1, nAnswered)
MFrank.col = rep(df.words.temp$rank_s1value[recalled.temp] * 1, nAnswered)
MBval.col = rep(df.words.temp$s2_value[recalled.temp], nAnswered)
MBhigh.col = rep(df.words.temp$high_s2value_indiv[recalled.temp] * 1, nAnswered)
MBrank.col = rep(df.words.temp$rank_s2value[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
OptionID_real.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
ind = ind + 1
}
}
Choice.col = as.vector(t(temp.choice))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col,
MFrank = MFrank.col, MBrank = MBrank.col, Condition = Condition.col))
#Recall = Recalled.col, Question = Question.col, OptionID_real = OptionID_real.col))
}
}
df.logit = df.logit %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df.logit2 = mlogit.data(df.logit, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFval * MBval | -1, df.logit2)#, panel = T,
#rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
df.graph = df.logit %>% mutate(MFhigh = factor(MFhigh), MBhigh = MBval) %>%
group_by(MFhigh,MBhigh,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(MFhigh,MBhigh) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
ggplot(data = df.graph, aes(x = MBhigh, y = Choice.mean, group = MFhigh, colour = MFhigh)) +
geom_point(aes(size = 2)) + geom_line() +
#geom_smooth(method='lm', formula = y ~ poly(x,3)) +
#geom_smooth() +
geom_errorbar(aes(ymin=Choice.mean - Choice.se, ymax = Choice.mean + Choice.se), width = .2) +
guides(size = FALSE)
summary(m)
# compute exclusion -------------------------------------------------------
df.s2.excl = df.s2 %>% filter(subject %in% subjlist) %>%
group_by(subject) %>%
summarize(comp_check_pass = mean(comp_check_pass[question_order == 0]),
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T),
numTrials = n())
recalled = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.s2.excl)) {
subj.name = df.s2.excl$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
df.s2.temp.mem = df.s2.temp %>% filter(question == 'Memory')
words_temp = trimws(as.string.vector(df.s2.temp.mem$choice))
val_temp = as.numeric(trimws(as.string.vector(df.s2.temp.mem$scratch)))
val_temp[is.na(val_temp)] = -99
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
if (recalled[i,j]) {
true_val = df.words.temp$s1_value[df.words.temp$word_ind == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 1
}
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
include_rows = NULL
include_names = NULL
for (subj in 1:length(subjlist)) {
subj.name = subjlist[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.excl %>% filter(subject == subj.name)
df.demo.temp = df.demo %>% filter(subject == subj.name)
exclude = df.demo.temp$write_down == 'Yes' || df.s2.subj.temp$comp_check_pass < 1 ||
df.s2.subj.temp$numNAs > minNAs || sum(recalled[subj,]) < 5 || df.s2.subj.temp$numTrials != numQuestions ||
df.s1.subj.temp$numTrials != numTrials || df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctCorrect_val < .75 ||
df.s1.subj.temp$pctCorrect_choice < .75 #|| df.s2$cond[df.s2$subject == subj.name] == 'normal'
if (exclude) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
# data manip --------------------------------------------------------------
## words
for (i in 1:nrow(df.words)) {
subj = df.words$subject[i]
s1_valuelist = (df.words %>% filter(subject == subj))$s1_value
s1_valuelist_rank = rank(s1_valuelist, ties.method = 'max')
s1_valuelist_indiv = (df.words %>% filter(subject == subj & recall.ever == 1))$s1_value
df.words$high_s1value[i] = df.words$s1_value[i] > median(s1_valuelist)
df.words$rank_s1value[i] = s1_valuelist_rank[df.words$word_ind[i] + 1]
df.words$high_s1value_indiv[i] = df.words$s1_value[i] > median(s1_valuelist_indiv)
s2_valuelist = (df.words %>% filter(subject == subj))$s2_value
s2_valuelist_rank = rank(s2_valuelist, ties.method = 'max')
s2_valuelist_indiv = (df.words %>% filter(subject == subj & recall.ever == 1))$s2_value
df.words$high_s2value[i] = df.words$s2_value[i] > median(s2_valuelist)
df.words$rank_s2value[i] = s2_valuelist_rank[df.words$word_ind[i] + 1]
df.words$high_s2value_indiv[i] = df.words$s2_value[i] > median(s2_valuelist_indiv)
}
## s2
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
cind = df.s2$choice_real_ind[i]
creal = df.s2$choice_real[i]
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$s1_value[word_rows])
df.s2$high_s1value[i] = ifelse(is.na(cind), NA, df.words$high_s1value[word_rows])
df.s2$high_s1value_indiv[i] = ifelse(is.na(cind), NA, df.words$high_s1value_indiv[word_rows])
df.s2$rank_s1value[i] = ifelse(is.na(cind), NA, df.words$rank_s1value[word_rows])
df.s2$s2_value[i] = ifelse(is.na(cind), NA, df.words$s2_value[word_rows])
df.s2$high_s2value[i] = ifelse(is.na(cind), NA, df.words$high_s2value[word_rows])
df.s2$high_s2value_indiv[i] = ifelse(is.na(cind), NA, df.words$high_s2value_indiv[word_rows])
df.s2$rank_s2value[i] = ifelse(is.na(cind), NA, df.words$rank_s2value[word_rows])
s2_valuelist = (df.words %>% filter(subject == subj.name))$s2_value
df.s2$median_value[i] = median(s2_valuelist)
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # just for modeling
bonus_value = ifelse(is.na(choice_real_ind), 0, s2_value))
df.s2.filt = df.s2 %>% filter(subject %in% include_names & question_order == 0)
df.words.filt = df.words %>% filter(subject %in% include_names)
# logit test
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words.filt %>% filter(subject == subj.name)
df.s2.temp = df.s2.filt %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
Condition.col = rep(df.s2.temp$cond, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$s1_value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_s1value_indiv[recalled.temp] * 1, nAnswered)
MFrank.col = rep(df.words.temp$rank_s1value[recalled.temp] * 1, nAnswered)
MBval.col = rep(df.words.temp$s2_value[recalled.temp], nAnswered)
MBhigh.col = rep(df.words.temp$high_s2value_indiv[recalled.temp] * 1, nAnswered)
MBrank.col = rep(df.words.temp$rank_s2value[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
OptionID_real.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
ind = ind + 1
}
}
Choice.col = as.vector(t(temp.choice))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col,
MFrank = MFrank.col, MBrank = MBrank.col, Condition = Condition.col))
#Recall = Recalled.col, Question = Question.col, OptionID_real = OptionID_real.col))
}
}
df.logit = df.logit %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df.logit2 = mlogit.data(df.logit, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFval * MBval | -1, df.logit2)#, panel = T,
#rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
summary(m)
# interaction graph
df.graph = df.logit %>% mutate(MFhigh = factor(MFhigh), MBhigh = MBval) %>%
group_by(MFhigh,MBhigh,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(MFhigh,MBhigh) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
ggplot(data = df.graph, aes(x = MBhigh, y = Choice.mean, group = MFhigh, colour = MFhigh)) +
geom_point(aes(size = 2)) + geom_line() +
#geom_smooth(method='lm', formula = y ~ poly(x,3)) +
#geom_smooth() +
geom_errorbar(aes(ymin=Choice.mean - Choice.se, ymax = Choice.mean + Choice.se), width = .2) +
guides(size = FALSE)
mean(df.s2.filt$cond == 'normal')
df.graph = df.logit %>% mutate(MFhigh = factor(MFhigh), MBhigh = factor(MBhigh)) %>%
group_by(MFhigh,MBhigh,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(MFhigh,MBhigh) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
ggplot(data = df.graph, aes(x = MBhigh, y = Choice.mean, group = MFhigh, colour = MFhigh)) +
geom_point(aes(size = 2)) + geom_line() +
#geom_smooth(method='lm', formula = y ~ poly(x,3)) +
#geom_smooth() +
geom_errorbar(aes(ymin=Choice.mean - Choice.se, ymax = Choice.mean + Choice.se), width = .2) +
guides(size = FALSE)
m = mlogit(Choice ~ MFhigh * MBhigh | -1, df.logit2)#, panel = T,
summary(m)
df.graph = df.logit %>% mutate(MFhigh = factor(MFhigh), MBhigh = factor(MBhigh)) %>%
group_by(MFhigh,MBhigh,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(MFhigh,MBhigh) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
# import data -------------------------------------------------------------
numWords = 12;
numTrials = 96;
minNAs = 1;
path = 'data/value/v4/real1/'
pointsPerCent_s1 = 10;
pointsPerCent_s2 = 1;
pointsPerWord = 3; # for memory condition
allBonus = 25;
numRealQuestions = 1;
type = 0;
maxRepeats = 2;
numQuestions = 2;
# Load data
df.demo = read.csv(paste0(path, 'demo.csv'), stringsAsFactors = F) %>% arrange(subject) %>% mutate(total_time_real = total_time / 60000)
df.words.raw = read.csv(paste0(path, 'words.csv'), stringsAsFactors = F) %>% arrange(subject, word_ind)
df.s1.raw = read.csv(paste0(path, 's1.csv'), stringsAsFactors = F) %>% arrange(subject);
df.s2.raw = read.csv(paste0(path, 's2.csv'), stringsAsFactors = F) %>% arrange(subject, question_order)
subjlist = df.demo$subject
# words
df.words = df.words.raw %>% filter(subject %in% subjlist) %>%
mutate(repeated = word_ind == lead(word_ind)) %>%
filter(!repeated)
# s2
df.s2 = df.s2.raw %>% filter(subject %in% subjlist)
df.s2$choice = toupper(df.s2$choice)
df.s2$scratch = gsub("[.]", ",", toupper(as.character(df.s2$scratch)))
df.s2$all_values = as.character(df.s2$all_values)
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = gsub("\n.*","",df.s2$choice[i])
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
if (is.na(cind)) {
# try scratch
c = gsub("\n.*","",df.s2$scratch[i])
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
}
df.s2$choice_real[i] = creal
df.s2$choice_real_ind[i] = cind
}
# s1
df.s1 = df.s1.raw %>% filter(subject %in% subjlist) %>%
mutate(correct_word = ain(toupper(resp), word, maxDist = 2), correct_val = resp2 == value, word_chosen = ifelse(choice, alt, word),
correct_choice = choice == ifelse(value > alt, 0, 1))
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(pctCorrect_words = mean(correct_word, na.rm = T), pctCorrect_val = mean(correct_val, na.rm = T),
pctCorrect_choice = mean(correct_choice, na.rm = T), numTrials = n())
# compute exclusion -------------------------------------------------------
df.s2.excl = df.s2 %>% filter(subject %in% subjlist) %>%
group_by(subject) %>%
summarize(comp_check_pass = mean(comp_check_pass[question_order == 0]),
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T),
numTrials = n())
recalled = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.s2.excl)) {
subj.name = df.s2.excl$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
df.s2.temp.mem = df.s2.temp %>% filter(question == 'Memory')
words_temp = trimws(as.string.vector(df.s2.temp.mem$choice))
val_temp = as.numeric(trimws(as.string.vector(df.s2.temp.mem$scratch)))
val_temp[is.na(val_temp)] = -99
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
if (recalled[i,j]) {
true_val = df.words.temp$s1_value[df.words.temp$word_ind == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 1
}
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
include_rows = NULL
include_names = NULL
for (subj in 1:length(subjlist)) {
subj.name = subjlist[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.excl %>% filter(subject == subj.name)
df.demo.temp = df.demo %>% filter(subject == subj.name)
exclude = df.demo.temp$write_down == 'Yes' || df.s2.subj.temp$comp_check_pass < 1 ||
df.s2.subj.temp$numNAs > minNAs || sum(recalled[subj,]) < 5 || df.s2.subj.temp$numTrials != numQuestions ||
df.s1.subj.temp$numTrials != numTrials || df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctCorrect_val < .75 ||
df.s1.subj.temp$pctCorrect_choice < .75 || df.s2$cond[df.s2$subject == subj.name] == 'reversed'
if (exclude) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
# data manip --------------------------------------------------------------
## words
for (i in 1:nrow(df.words)) {
subj = df.words$subject[i]
s1_valuelist = (df.words %>% filter(subject == subj))$s1_value
s1_valuelist_rank = rank(s1_valuelist, ties.method = 'max')
s1_valuelist_indiv = (df.words %>% filter(subject == subj & recall.ever == 1))$s1_value
df.words$high_s1value[i] = df.words$s1_value[i] > median(s1_valuelist)
df.words$rank_s1value[i] = s1_valuelist_rank[df.words$word_ind[i] + 1]
df.words$high_s1value_indiv[i] = df.words$s1_value[i] > median(s1_valuelist_indiv)
s2_valuelist = (df.words %>% filter(subject == subj))$s2_value
s2_valuelist_rank = rank(s2_valuelist, ties.method = 'max')
s2_valuelist_indiv = (df.words %>% filter(subject == subj & recall.ever == 1))$s2_value
df.words$high_s2value[i] = df.words$s2_value[i] > median(s2_valuelist)
df.words$rank_s2value[i] = s2_valuelist_rank[df.words$word_ind[i] + 1]
df.words$high_s2value_indiv[i] = df.words$s2_value[i] > median(s2_valuelist_indiv)
}
## s2
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
cind = df.s2$choice_real_ind[i]
creal = df.s2$choice_real[i]
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$s1_value[word_rows])
df.s2$high_s1value[i] = ifelse(is.na(cind), NA, df.words$high_s1value[word_rows])
df.s2$high_s1value_indiv[i] = ifelse(is.na(cind), NA, df.words$high_s1value_indiv[word_rows])
df.s2$rank_s1value[i] = ifelse(is.na(cind), NA, df.words$rank_s1value[word_rows])
df.s2$s2_value[i] = ifelse(is.na(cind), NA, df.words$s2_value[word_rows])
df.s2$high_s2value[i] = ifelse(is.na(cind), NA, df.words$high_s2value[word_rows])
df.s2$high_s2value_indiv[i] = ifelse(is.na(cind), NA, df.words$high_s2value_indiv[word_rows])
df.s2$rank_s2value[i] = ifelse(is.na(cind), NA, df.words$rank_s2value[word_rows])
s2_valuelist = (df.words %>% filter(subject == subj.name))$s2_value
df.s2$median_value[i] = median(s2_valuelist)
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # just for modeling
bonus_value = ifelse(is.na(choice_real_ind), 0, s2_value))
df.s2.filt = df.s2 %>% filter(subject %in% include_names & question_order == 0)
df.words.filt = df.words %>% filter(subject %in% include_names)
# logit test
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words.filt %>% filter(subject == subj.name)
df.s2.temp = df.s2.filt %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
Condition.col = rep(df.s2.temp$cond, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$s1_value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_s1value_indiv[recalled.temp] * 1, nAnswered)
MFrank.col = rep(df.words.temp$rank_s1value[recalled.temp] * 1, nAnswered)
MBval.col = rep(df.words.temp$s2_value[recalled.temp], nAnswered)
MBhigh.col = rep(df.words.temp$high_s2value_indiv[recalled.temp] * 1, nAnswered)
MBrank.col = rep(df.words.temp$rank_s2value[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
OptionID_real.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
ind = ind + 1
}
}
Choice.col = as.vector(t(temp.choice))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col,
MFrank = MFrank.col, MBrank = MBrank.col, Condition = Condition.col))
#Recall = Recalled.col, Question = Question.col, OptionID_real = OptionID_real.col))
}
}
df.logit = df.logit %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df.logit2 = mlogit.data(df.logit, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFhigh * MBhigh | -1, df.logit2)#, panel = T,
#rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
summary(m)
df.graph = df.logit %>% mutate(MFhigh = factor(MFhigh), MBhigh = factor(MBhigh)) %>%
group_by(MFhigh,MBhigh,Subj) %>% summarize(Choice = any(Choice)) %>%
group_by(MFhigh,MBhigh) %>%
summarize(Choice.mean = mean(Choice), Choice.se = sqrt(Choice.mean * (1 - Choice.mean) / n()))
ggplot(data = df.graph, aes(x = MBhigh, y = Choice.mean, group = MFhigh, colour = MFhigh)) +
geom_point(aes(size = 2)) + geom_line() +
#geom_smooth(method='lm', formula = y ~ poly(x,3)) +
#geom_smooth() +
geom_errorbar(aes(ymin=Choice.mean - Choice.se, ymax = Choice.mean + Choice.se), width = .2) +
guides(size = FALSE)
summary(m)
