choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFval - mean(MFval), MBcent = MBval - mean(MBval), Int = MFval * MBval)
View(df.logit)
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFcent + MBcent + Int | -1, df.m, panel = T,
rpar = c(MFcent = "n", MBcent = "n", Int = 'n'), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
m.real = runLogit(df.logit)
summary(m.real)
numRealQuestions = numQuestions - 1
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order >=4) #& df.s2.temp$rank_value > 7)
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
#MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFval.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q]) && df.s2.temp$question_order[q] >=4) { #&& df.s2.temp$rank_value[q] > 7) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 7
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFval - mean(MFval), MBcent = MBval - mean(MBval), Int = MFval * MBval)
# Do logit
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFcent + MBcent + Int | -1, df.m, panel = T,
rpar = c(MFcent = "n", MBcent = "n", Int = 'n'), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
m.real = runLogit(df.logit)
summary(m.real)
1
subj = 1
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order >=4) #& df.s2.temp$rank_value > 7)
nAnswered
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
#MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFval.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q]) && df.s2.temp$question_order[q] >=4) { #&& df.s2.temp$rank_value[q] > 7) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 7
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
numRealQuestions = numQuestions - 1
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order >=4) #& df.s2.temp$rank_value > 7)
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
#MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFval.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order[q] >=4], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q]) && df.s2.temp$question_order[q] >=4) { #&& df.s2.temp$rank_value[q] > 7) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 7
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFval - mean(MFval), MBcent = MBval - mean(MBval), Int = MFval * MBval)
numRealQuestions = numQuestions - 1
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order >=4) #& df.s2.temp$rank_value > 7)
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
#MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFval.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order >=4], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q]) && df.s2.temp$question_order[q] >=4) { #&& df.s2.temp$rank_value[q] > 7) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 7
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFval - mean(MFval), MBcent = MBval - mean(MBval), Int = MFval * MBval)
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFcent + MBcent + Int | -1, df.m, panel = T,
rpar = c(MFcent = "n", MBcent = "n", Int = 'n'), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
m.real = runLogit(df.logit)
summary(m.real)
numRealQuestions = numQuestions - 1
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order <4) #& df.s2.temp$rank_value > 7)
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
#MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFval.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order <4], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q]) && df.s2.temp$question_order[q] <4) { #&& df.s2.temp$rank_value[q] > 7) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 7
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFval - mean(MFval), MBcent = MBval - mean(MBval), Int = MFval * MBval)
# Do logit
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFcent + MBcent + Int | -1, df.m, panel = T,
rpar = c(MFcent = "n", MBcent = "n", Int = 'n'), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
m.real = runLogit(df.logit)
summary(m.real)
## Graph
df.subj = df.logit %>% group_by(OptionID, Question) %>% summarize(Choice.mean = mean(Choice), Choice.se = se(Choice), X1 = mean(MFval), X2 = mean(MBval))
df.sum = df.logit %>% group_by(MFval,MBhigh) %>% summarize(Choice.mean = mean(Choice))
ggplot(data = df.sum, aes(x = MBhigh, y = Choice.mean, group = MFval, colour = MFval)) +
geom_point(aes(size = 2)) + geom_line() #+
#geom_errorbar(aes(ymax = Choice.mean + Choice.se, ymin = Choice.mean - Choice.se), width = .1)
df.sum = df.logit %>% group_by(MFval,MBval) %>% summarize(Choice.mean = mean(Choice))
ggplot(data = df.sum, aes(x = MBhigh, y = Choice.mean, group = MFval, colour = MFval)) +
geom_point(aes(size = 2)) + geom_line() #+
ggplot(data = df.sum, aes(x = MBval, y = Choice.mean, group = MFval, colour = MFval)) +
geom_point(aes(size = 2)) + geom_line() #+
numRealQuestions = numQuestions - 1
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order >=4) #& df.s2.temp$rank_value > 7)
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
#MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFval.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind) & df.s2.temp$question_order >=4], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q]) && df.s2.temp$question_order[q] >=4) { #&& df.s2.temp$rank_value[q] > 7) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 7
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFval - mean(MFval), MBcent = MBval - mean(MBval), Int = MFval * MBval)
df.sum = df.logit %>% group_by(MFval,MBval) %>% summarize(Choice.mean = mean(Choice))
ggplot(data = df.sum, aes(x = MBval, y = Choice.mean, group = MFval, colour = MFval)) +
geom_point(aes(size = 2)) + geom_line() #+
#geom_errorbar(aes(ymax = Choice.mean + Choice.se, ymin = Choice.mean - Choice.se), width = .1)
J = 14
bmean = 3
bstd = 1
N = 100
K = 8 # # of trials
SS = 4 # sample size
x2_total = NULL
for (i in 1:K) {
#x2_total = c(x2_total, sample(rep(0:1, each = 7)))
x2_total = c(x2_total, sample(1:14))
}
x2_total = matrix(x2_total, nrow = K, ncol = J, byrow = T)
df = data.frame(Subj = NULL, Trial = NULL, Trial_unique = NULL, OptionID = NULL, Choice = NULL, X1 = NULL, X2 = NULL, X3 = NULL)
for (subj in 1:N) {
b1 = rnorm(1, bmean, bstd)
b2 = rnorm(1, bmean, bstd)
#b3 = rnorm(1, bmean, bstd)
b3 = 0
betas = c(b1, b2, b3)
x1 = sample(rep(0:1, each = 7))
for (trial in 1:K) {
x2 = x2_total[trial,]
x3 = x1 * x2
attributes = matrix(c(x1,x2,x3), nrow = 3, ncol = J, byrow = T)
#probs = exp(betas %*% attributes) / sum(exp(betas %*% attributes))
#choice = sample(J, 1, F, probs)
# (1) get sample!
probs1 = exp(b1 * x1) / sum(exp(b1 * x1))
s = sample(J, SS, F, probs1)
# (2) choose
#probs2 = exp(b1 * x1[s] + b2 * x2[s] + b3 * x3[s]) / sum(exp(b1 * x1[s] + b2 * x2[s] + b3 * x3[s]))
probs2 = exp(b2 * x2[s]) / sum(exp(b2 * x2[s]))
choice = sample(s, 1, T, probs2)
#choice = s[which.max(x2[s])]
for (alt in 1:J) {
df = rbind(df, data.frame(Subj = subj, Trial = trial, Trial_unique = paste(subj, trial, sep="_"),
OptionID = alt, Choice = choice == alt,
X1 = x1[alt], X2 = x2[alt], X3 = x3[alt]))
}
}
}
df = df %>% mutate(X1 = X1 - mean(X1), X2 = X2 - mean(X2))
View(df)
View(df)
df.group = df %>% mutate(X2_type = ifelse(X2 == max(X2), 1, ifelse(X2 == min(X2), -1, 0)))
View(df.group)
df.group = df %>% mutate(X2_type = ifelse(X2 == max(X2), 1, ifelse(X2 == min(X2), -1, 0))) %>%
group_by(X1,X2_type) %>% filter(X2_type != 0) %>% summarize(Choice = mean(Choice))
View(df.group)
ggplot(data = df.group, aes(x = X2, y = Choice, group = X1, colour = X1)) +
geom_point(aes(size = 2)) + geom_line()
ggplot(data = df.group, aes(x = X2_type, y = Choice, group = X1, colour = X1)) +
geom_point(aes(size = 2)) + geom_line()
J = 14
bmean = 3
bstd = 1
N = 100
K = 8 # # of trials
SS = 4 # sample size
x2_total = NULL
for (i in 1:K) {
#x2_total = c(x2_total, sample(rep(0:1, each = 7)))
x2_total = c(x2_total, sample(1:14))
}
x2_total = matrix(x2_total, nrow = K, ncol = J, byrow = T)
df = data.frame(Subj = NULL, Trial = NULL, Trial_unique = NULL, OptionID = NULL, Choice = NULL, X1 = NULL, X2 = NULL, X3 = NULL)
for (subj in 1:N) {
b1 = rnorm(1, bmean, bstd)
b2 = rnorm(1, bmean, bstd)
#b3 = rnorm(1, bmean, bstd)
b3 = 0
betas = c(b1, b2, b3)
x1 = sample(rep(0:1, each = 7))
for (trial in 1:K) {
x2 = x2_total[trial,]
x3 = x1 * x2
attributes = matrix(c(x1,x2,x3), nrow = 3, ncol = J, byrow = T)
probs = exp(betas %*% attributes) / sum(exp(betas %*% attributes))
choice = sample(J, 1, F, probs)
# (1) get sample!
probs1 = exp(b1 * x1) / sum(exp(b1 * x1))
s = sample(J, SS, F, probs1)
# (2) choose
#probs2 = exp(b1 * x1[s] + b2 * x2[s] + b3 * x3[s]) / sum(exp(b1 * x1[s] + b2 * x2[s] + b3 * x3[s]))
probs2 = exp(b2 * x2[s]) / sum(exp(b2 * x2[s]))
#choice = sample(s, 1, T, probs2)
#choice = s[which.max(x2[s])]
for (alt in 1:J) {
df = rbind(df, data.frame(Subj = subj, Trial = trial, Trial_unique = paste(subj, trial, sep="_"),
OptionID = alt, Choice = choice == alt,
X1 = x1[alt], X2 = x2[alt], X3 = x3[alt]))
}
}
}
df = df %>% mutate(X1 = X1 - mean(X1), X2 = X2 - mean(X2))
df.group = df %>% mutate(X2_type = ifelse(X2 == max(X2), 1, ifelse(X2 == min(X2), -1, 0))) %>%
group_by(X1,X2_type) %>% filter(X2_type != 0) %>% summarize(Choice = mean(Choice))
#df.group = df %>% group_by(X1,X2) %>% summarize(Choice = mean(Choice))
ggplot(data = df.group, aes(x = X2_type, y = Choice, group = X1, colour = X1)) +
geom_point(aes(size = 2)) + geom_line()
