rm(list=ls())
require(MASS)
x <- c(110, 100, 102, 95, 99, 100, 98, 90, 109, 105, 108, 102, 100, 100, 103, 101, 104, 106, 101, 97)   ## IQ values
hist(x, breaks = 6, xlab = "IQ")
hist(x, xlab = "IQ")
hist(x, breaks = 10, xlab = "IQ")
mean(x)      ## sample mean
sd(x)        ## sample sd
fitnorm <- fitdistr(x, densfun = "normal")  ## it actually uses ML-estimation
fitnorm                                     ## note that it is not exactly the same as sd(x) (1/n vs. 1/(n-1))
hist(x, freq = FALSE, xlab = "IQ", ylim = c(0, 0.1), xlim = c(85, 115), main = "IQ Histogram")
xnorm <- sort(rnorm(500, fitnorm$estimate[1], fitnorm$estimate[2]))
lines(xnorm, dnorm(xnorm, fitnorm$estimate[1], fitnorm$estimate[2]))
## let's just fix sigma and explore the likelihood for various values of mu
sigma <- fitnorm$estimate[2]
sigma
muvec <- seq(90, 110, 0.01)
muvec
## we should get the same value as in fitdistr
likvec <- sapply(muvec, function(mu) {
sum(dnorm(x, mu, sd = sigma, log = TRUE))   ## sum of log-density values
})
likvec     ## these are the log-likelihood values given (!!) the parameter mu
ind <- which(likvec == max(likvec))    ## pull out the largest one
muvec[ind]   ## check: same as above
## likelihood representation
plot(muvec, likvec, type = "l", main = "Log-Likelihood", xlab = expression(mu), ylab = "Log-likelihood value")
abline(v = muvec[ind], col = "gray", lty = 2, lwd = 2)
if (!require("BSDA")) {install.packages("BSDA"); require("BSDA")}   ## computes a z-test
if (!require("animation")) {install.packages("animation"); require("animation")}   ## CI animation
if (!require("devtools")) {install.packages("devtools"); require("devtools")}   ## supports installing from github
if (!require("BayesianFirstAid")) {install_github("rasmusab/bayesian_first_aid"); require("BayesianFirstAid")}  ## Bayes package to play with
if (!require("coda")) {install.packages("coda"); require("coda")}
if (!require("effsize")) {install.packages("effsize"); require("effsize")}    ## effect size
if (!require("PairedData")) {install.packages("PairedData"); require("PairedData")}  ## paired datasets
theta <- seq(0, 1, 0.1)
therta
theta
prior <- pmin(theta, 1-theta)/sum(pmin(theta, 1-theta))
prior
op <- par(mfrow = c(3,1))
plot(theta, prior, type = "h", xlab = expression(theta), ylab = expression(paste("p(", theta, ")")), main = "Prior")
lik <- theta               ## due to Bernoulli (z = 1, N = 1)
plot(theta, lik, type = "h", xlab = expression(theta), ylab = expression(paste("p(D|", theta,")")), main = "Likelihood (z = 1, n = 1)")
p_D <- sum(lik*prior)      ## evidence
post <- lik*prior/p_D      ## Bayes theorem
plot(theta, post, type = "h", xlab = expression(theta), ylab = expression(paste("p(", theta,"|D)")), main = "Posterior")
par(op)
theta <- seq(0, 1, 0.01)               ## possible parameter values
theta
prior <- dbeta(theta, 11, 11)          ## beta (11,11) density (alpha = 11, beta = 11)
p_DTheta <- theta^8*(1-theta)^18       ## likelihood z = 8 heads, N - z = 18 tails
p_DTheta
p_ThetaD <- dbeta(theta, 19, 29)       ## 8+11, 26-8+11
x11()
op <- par(mfrow = c(3,1))
plot(theta, prior, type = "l", xlab = expression(theta), ylab = expression(paste("d(",theta,")")), main = "Prior")
plot(theta, p_DTheta, type = "l", xlim = c(0,1), main = "Likelihood", xlab = expression(theta), ylab = expression(paste("p(D|", theta, ")")))
plot(theta, p_ThetaD, type = "l", xlim = c(0,1), main = "Posterior", xlab = expression(theta), ylab = expression(paste("p(", theta, "|D)")))
abline(v = c(0.261, 0.533), lty = 2, col = "gray")
arrows(0.261, 0.8, 0.533, 0.8, length = 0.05, code = 3, col = "darkgray")
text(0.4, 1.5, "95% HPD", cex = 0.9, col = "darkgray")
barplot(as.matrix(c(60, 40)), xlim = c(-0.8,2), main = "Parrot Bar Chart")
abline(h = 50, col = "red", lty = 2)
barplot(as.matrix(c(60, 40)), xlim = c(-0.8,2), main = "Parrot Bar Chart")
par(op)
barplot(as.matrix(c(60, 40)), xlim = c(-0.8,2), main = "Parrot Bar Chart")
par(mfrow = c(1))
par(mfrow = c(1,1))
barplot(as.matrix(c(60, 40)), xlim = c(-0.8,2), main = "Parrot Bar Chart")
abline(h = 50, col = "red", lty = 2)
legend("topleft", legend = c("correct", "incorrect"), pch = 22, pt.bg = c("black","gray"))
binom.test(60, n = 100)      ## frequentist version
## We can not reject H0.
## Bayesian version
set.seed(123)       ## we fix this since there is some simulation going on here (MCMC)
?bayes.binom.test   ## it uses a beta(1,1) prior (uninformative).
x <- seq(-0.5, 1.5, 0.001)    ## just for plotting the prior
plot(x, dbeta(x, 1, 1), type = "l", xlim = c(-0.5, 1.5), xlab = "p", ylab = "density", main = "Beta(1,1) Prior")
set.seed(123)
res.bin <- bayes.binom.test(60, 100)   ## Bayesian binomial test
res.bin
install_github("rasmusab/bayesian_first_aid");
require(rjags)
require(rjags)
.Platform$pkgType
load(rjags)
library(rjags)
rsq <- ss.reg / (ss.reg + ss.res)
library(foreign)
texas <- as.data.frame(read.spss("http://mprlab327.webfactional.com/amorris/stats/M142.sav"))
colnames(texas)
# ----- Problem 3 -----
ss.reg <- 59.69
ss.res <- 344.25
+
+
rsq <- ss.reg / (ss.reg + ss.res)
-.035 ^ 2
-.035 ^ 2
-1 ^ 2
(-1) ^ 2
(-.035) ^ 2
c(.179, .178, -.029, .121, .0884, -.0347, .105) ^ 2
rsq <- ss.reg / (ss.reg + ss.res)
N <- 361
J <- 7
ss.reg <- 59.69
ss.res <- 344.25
ms.reg <- ss.reg / J
ms.res <- ss.res / (N - J - 1)
f.stat <- ms.reg / ms.res
pf(f.stat, J, N - J - 1, lower.tail = F)
rsq.adj <- 1 - (1 - rsq) * (N - 1) / (N - J - 1)
see <- sqrt(ss.res / N)
var.res <- ss.res / (N - J - 1)
.0884 ^ 2
b <- .143 * 1.618 / 1.059
t.stat <- b / .038
?pt
2 * pt(t.stat, N - J - 1)
pt(t.stat, N - J - 1)
2 * pt(t.stat, N - J - 1, lower.tail = F)
.114 ^ 2
.073 ^ 2
.073 ^ 2 * N / (N - 1)
.073 ^ 2 * (N - 1) / N
t.stat <- b / se.b
b <- .115 * .114 / 1.059
# We need to calculate the standard error of the unstandarized coefficient by:
# std-error-b <- sqrt(std-error-estimate ^ 2 / (ss-SDO * (1 - coef-of-multicollinearity)))
se.estimate <- sqrt(ss.res / N)
# to get the ss-SDO, we square the standard deviation of SDO (to get variance)
# and then multiply by N. (We're assuming that SPSS isn't reporting the
# unbiased estimate of population standard deviation.)
ss.sdo <- (.114 ^ 2) * N
# note that (1 - coef-of-multicollinearity(sdo)) = tolerance(sdo),
# which is given
tol.sdo <- .843
# so:
se.b <- sqrt((se.estimate ^ 2) / (ss.sdo * tol.sdo))
t.stat <- b / se.b
2 * pt(t.stat, N - J - 1, lower.tail = F)
spcor.aa.ed <- (cor.aa.ed - cor.aa.sdo * cor.ed.sdo) / sqrt(1 - cor.ed.sdo ^ 2)
cor.aa.ed <- .091
cor.aa.sdo <- .173
cor.ed.sdo <- -.228
# That semi-partial correlation is a measure of the relationship between
# affirmative action opposition and education, controlling for the
# effect of SDO on education.
# It is calculated by:
spcor.aa.ed <- (cor.aa.ed - cor.aa.sdo * cor.ed.sdo) / sqrt(1 - cor.ed.sdo ^ 2)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
require(MASS)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
require(ez)
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 125
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
200 * .7
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 140
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
c(.235, .268, -.041, .091, .138, .077, .173) ^ 2
rm(list=ls())
N <- 361 # sample size
J <- 7 # number of predictors
ss.reg <- 59.69 # sum of squares of regression model
ss.res <- 344.25 # sum of squares of residuals
ms.reg <- ss.reg / J # mean-square regression
ms.res <- ss.res / (N - J - 1) # mean-square residuals
## 3a.
# What % of the variation in opposition to affirmative action can be explained
# by the other variables?
# The % of variance explained by all of them is R-squared, which is
# SS-reg / (SS-reg + SS-res), or...
rsq <- ss.reg / (ss.reg + ss.res) # .15
# The % of variance that can be explained by each predictor (NOT controlling
# for other variables) is the square of the zero-order correlations, or...
c(.235, .268, -.041, .091, .138, .077, .173) ^ 2
# in the order on the homework:
# .055 .072 .0017 .0083 .019 .0059 .030
# The % of variance that can be explained by each predictor (controlling for the
# effects of the other predictors on this predictor) is the square of the semi-partial correlation
# between opposition to affirmative action and the predictor (available in the output), or..
c(.179, .178, -.029, .121, .0884, -.0347, .105) ^ 2
# in the order on the homework:
# .032 .032 .00084 .015 .0078 .0012 .011
f.stat <- ms.reg / ms.res
# and get the p value by using the F distribution function...
pf(f.stat, J, N - J - 1, lower.tail = F)
rsq.adj <- 1 - (1 - rsq) * (N - 1) / (N - J - 1) # .13
var.res <- ss.res / (N - J - 1) # .98
.0884 ^ 2 # .0078
b.educ <- .143 * 1.059 / 1.618
# then, calculate a t statistic by t(N - J - 1) = b / std-error(b), pulling std-error(b) from the
# output, or...
t.stat.educ <- b.educ / .038
# finally, get the (2-tailed) p value by looking up this value in the t distribution
2 * pt(t.stat.educ, N - J - 1, lower.tail = FALSE) # .014
# p < .05; opposition to affirmative action can be predicted by education at an above-chance level
## 3g.
# Same explanation as above.
b.sdo <- .115 * 1.059 / .114
# As it's not in the output, this time we need to calculate the standard error of the unstandarized
# coefficient by:
# std-error-b <- sqrt(std-error-estimate ^ 2 / (ss-SDO * (1 - coef-of-multicollinearity)))
se.estimate.sdo <- sqrt(ss.res / N) # .98
se.estimate.sdo <- sqrt(ss.res / N) # .98
# to get the ss-SDO, we square the standard deviation of SDO (to get variance)
# and then multiply by N. (We're assuming that SPSS isn't reporting the
# unbiased estimate of population standard deviation.)
ss.sdo <- (.114 ^ 2) * N
# note that (1 - coef-of-multicollinearity(sdo)) = tolerance(sdo),
# which is given
tol.sdo <- .843
# so:
se.b.sdo <- sqrt((se.estimate.sdo ^ 2) / (ss.sdo * tol.sdo)) # .49
t.stat.sdo <- b.sdo / se.b.sdo # 2.18
2 * pt(t.stat.sdo, N - J - 1, lower.tail = FALSE) # .030
# p < .05; opposition to affirmative action can be predicted by SDO at an above-chance level
## 3h.
cor.aa.ed <- .091
cor.aa.sdo <- .173
cor.ed.sdo <- -.228
# This semi-partial correlation is a measure of the relationship between affirmative action
# opposition and education, controlling for the effect of SDO on education. It is calculated by:
spcor.aa.ed <- (cor.aa.ed - cor.aa.sdo * cor.ed.sdo) / sqrt(1 - cor.ed.sdo ^ 2) # .13
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 140
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
install.packages("BiasedUrn")
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(mlogit)
require(stringdist)
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=18, face = "bold"), axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20), plot.title = element_text(size = 26, face = "bold", vjust = 1))
setwd("~/Me/Psychology/Projects/choicesets/with_sam")
getIndex = function(x, list) {
y = numeric(length(x))
for (j in 1:length(x)) {
if (any(list %in% x[j])) {
y[j] = which(list %in% x[j])
} else {
y[j] = NA
}
}
return(y)
}
as.string.vector = function(x) {
temp = strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]
return(substr(temp, 2, nchar(temp) - 1))
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]))
}
se = function(x) {return(sd(x) / sqrt(length(x)))}
dodge <- position_dodge(width=0.9)
numWords = 14;
numQuestions = 9; # including memory
pointsPerCent = 10;
pointsPerWord = 10; # for memory condition
path = 'data/cs_wg_v3/real3/'
# Load data
df.demo = read.csv(paste0(path, 'demo.csv'), stringsAsFactors = F) %>% arrange(subject) %>% mutate(total_time_real = total_time / 60000)
df.words.raw = read.csv(paste0(path, 'words.csv'), stringsAsFactors = F) %>% arrange(subject, word_ind)
df.s1.raw = read.csv(paste0(path, 's1.csv'), stringsAsFactors = F) %>% arrange(subject)
df.s2.raw = read.csv(paste0(path, 's2.csv'), stringsAsFactors = F) %>% arrange(subject, question_order)
subjlist = df.demo$subject
## Fix DFs
# drop anyone who didn't finish
df.s1 = df.s1.raw %>% filter(subject %in% subjlist) %>% mutate(correct_word = ain(toupper(resp), word, maxDist = 2), correct_val = resp2 == value)
df.s2 = df.s2.raw %>% filter(subject %in% subjlist)
df.words = df.words.raw %>% mutate(doubled = ifelse(is.na(lead(word)), FALSE, word == lead(word) & subject == lead(subject))) %>%
filter(doubled == FALSE & subject %in% subjlist) %>%
mutate(high_val = value > 5, numChosen = 0)
# get numChosen & cors
df.s1.subjword = df.s1 %>% group_by(subject, word) %>% summarize(numChosen = sum(choice == 0))
for (i in 1:nrow(df.words)) {
subjword_rows = df.s1.subjword$subject == df.words$subject[i] & df.s1.subjword$word == df.words$word[i]
df.words$numChosen[i] = ifelse(any(subjword_rows), df.s1.subjword$numChosen[subjword_rows], NA)
}
df.cors = df.words %>% group_by(subject) %>% summarize(cors = cor(numChosen, value))
# get pctCorrects
df.s1.subj = df.s1 %>% group_by(subject) %>% summarize(pctCorrect_words = mean(correct_word), pctCorrect_val = mean(correct_val), numTrials = n())
# Mutate df.s2
df.s2$choice = toupper(df.s2$choice)
df.s2$scratch = gsub("[.]", ",", toupper(as.character(df.s2$scratch)))
df.s2$all_values = as.character(df.s2$all_values)
rewards_te = matrix(c(3, 1, 2, 1, 5, 4, 4, 0, 3, 2, 2, 2, 2, 3,
1, 4, 0, 4, 4, 0, 3, 2, 6, 3, 3, 3, 2, 2,
3, 2, 4, 4, 0, 4, 1, 5, 1, 2, 4, 2, 4, 1,
2, 3, 3, 4, 3, 2, 3, 4, 5, 2, 4, 4, 3, 2,
23, 12, 23, 14, 12, 25, 12, 12, 15, 26, 9, 24, 2, 8,
4, 19, 0, 14, 14, 12, 14, 14, 4, 17, 19, 0, 4, 0,
5, 12, 1, 8, 8, 13, 18, 5, 6, 0, 18, 1, 13, 6,
5, 2, 13, 7, 11, 7, 1, 22, 12, 3, 17, 5, 14, 15,
2, 1, 2, 4, 2, 3, 1, 0, 2, 0, 8, 2, 2, 2,
6, 5, 5, 9, 7, 8, 5, 3, 9, 5, 5, 8, 6, 4,
6,  3,  5,  3,  7,  6,  6,  1, 11,  8,  5,  7,  4,  5), nrow = 11, ncol = numWords, byrow = T);
qvec = c(1, 2, 5, 6, 7, 8, 10, 11)
mult = c(10, 10, 5, 5, 5, 10, 10, 10)
df.s2$rank_value = NULL
df.s2$num_ties = NULL
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = df.s2$choice[i]
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
all_vals = as.numeric.vector(df.s2$all_values[i])
#all_vals = rewards_te[qvec[df.s2$question_ind[i] + 1], ] * mult[df.s2$question_ind[i] + 1]
#df.s2$all_values[i] = paste0('[', toString(all_vals), ']')
all_vals_rank = rank(all_vals, ties.method = 'max')
s2_val = ifelse(is.na(cind), NA, all_vals[cind])
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$choice_real[i] = creal
df.s2$choice_real_ind[i] = cind
df.s2$s2_value[i] = s2_val
df.s2$rank_value[i] = ifelse(is.na(cind), NA, all_vals_rank[cind])
df.s2$num_ties[i] = ifelse(is.na(cind), NA, sum(s2_val == all_vals))
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$value[word_rows])
df.s2$s1_exposures[i] = ifelse(is.na(cind), NA, df.words$exposures[word_rows])
df.s2$s1_chosen[i] = ifelse(is.na(cind), NA, df.words$numChosen[word_rows])
df.s2$numWords_s1val[i] = ifelse(is.na(cind), NA, ifelse(df.s2$s1_value[i] %in% c(0,10), 3, 2))
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # don't use that ind for anything serious
doubled = ifelse(is.na(choice_real_ind), NA, ifelse(is.na(lead(choice_real_ind)), F, choice_real_ind == lead(choice_real_ind)) |
ifelse(is.na(lag(choice_real_ind)), F, choice_real_ind == lag(choice_real_ind))),
bonus_value = ifelse(is.na(choice_real_ind), 0, ifelse(doubled, 0, s2_value)),
high_val = s1_value > 5)
df.mem = df.s2 %>% filter(question == 'Memory')
df.s2.subj = df.s2 %>% filter(subject %in% df.demo$subject) %>% group_by(subject) %>%
summarize(s2_bonus = sum(bonus_value), rt = mean(rt) / 1000,
comp_check_pass = mean(comp_check_pass),
comp_check_rt = mean(comp_check_rt) / 1000,
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T))
## Compute recalled
recalled = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.mem), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.mem)) {
subj.name = df.mem$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
words_temp = trimws(as.string.vector(df.mem$choice[i]))
val_temp = as.numeric(trimws(as.string.vector(df.mem$scratch[i])))
wordlist = df.words.temp$word
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
if (recalled[i,j]) {
true_val = df.words.temp$value[df.words.temp$word_ind  == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 2
}
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
## Compute exclusion
# Exclude if any of these: cor in s1 < .75, comp_check_pass < .5, pctCorrect_words < .75, pctCorrect_pts < .75, numNAs > 3, numRepeats > 2, numRecalled < 5
include_rows = NULL
include_names = NULL
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
df.cors.temp = df.cors %>% filter(subject == subj.name)
if (df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctCorrect_val < .75 || df.s2.subj.temp$comp_check_pass < .5 ||
df.s2.subj.temp$numRepeats > 2 || df.cors.temp$cors < .75 || sum(recalled[subj,]) < 5 || df.s1.subj.temp$numTrials != 112 || df.s2.subj.temp$numNAs > 4) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
nrecall = rowSums(recalled[include_rows,])
nrecall_val = rowSums(recalled[include_rows,])
mean(nrecall)
mean(nrecall_val)
nrecall_bonus = rowSums(recalled & recalled_val)
df.s2.subj = df.s2.subj %>% mutate(mem_bonus = nrecall_bonus[df.mem$subject == subject] * pointsPerWord)
df.demo = df.demo %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus + s2_bonus + mem_bonus) / (pointsPerCent * 100), 2))
write.table(df.demo %>% filter(id >= 150) %>% select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses - cs_wg_v3_real3.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
