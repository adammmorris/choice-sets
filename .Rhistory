choice = df.s1$choice[i]
df.s1$word_value[i] = df.words$value[df.words$subject == subj & df.words$word == word]
df.s1$alt_value[i] = alt
df.s1$word_better[i] = df.s1$word_value[i] > df.s1$alt_value[i]
df.s1$chose_better[i] = ifelse(df.s1$word_better[i], !choice, choice)
}
# get numChosen & cors
df.s1.subjword = df.s1 %>% group_by(subject, word_chosen) %>% summarize(numChosen = n())
for (i in 1:nrow(df.words)) {
subjword_rows = df.s1.subjword$subject == df.words$subject[i] & df.s1.subjword$word_chosen == df.words$word[i]
df.words$numChosen[i] = ifelse(any(subjword_rows), df.s1.subjword$numChosen[subjword_rows], NA)
df.words$numChosen_high[i] = df.words$numChosen[i] > 6
}
df.words.subj = df.words %>% group_by(subject) %>% summarize(cor = cor(value, numChosen))
# get pctCorrects
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(pctCorrect_words = mean(correct_word, na.rm = T), pctCorrect_val = mean(correct_val, na.rm = T), numTrials = n(),
pctHighVal = mean(s1_val_high), pctChoseBetter = mean(chose_better))
## s2
df.s2 = df.s2.raw %>% filter(subject %in% subjlist)
# Mutate df.s2
df.s2$choice = toupper(df.s2$choice)
df.s2$scratch = gsub("[.]", ",", toupper(as.character(df.s2$scratch)))
df.s2$all_values = as.character(df.s2$all_values)
df.s2$rank_value = NULL
df.s2$num_ties = NULL
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = df.s2$choice[i]
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
all_vals = as.numeric.vector(df.s2$all_values[i])
#all_vals = rewards_te[qvec[df.s2$question_ind[i] + 1], ] * mult[df.s2$question_ind[i] + 1]
#df.s2$all_values[i] = paste0('[', toString(all_vals), ']')
all_vals_rank = rank(all_vals, ties.method = 'max')
s2_val = ifelse(is.na(cind), NA, all_vals[cind])
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$choice_real[i] = creal
df.s2$choice_real_ind[i] = cind
df.s2$s2_value[i] = s2_val
df.s2$rank_value[i] = ifelse(is.na(cind), NA, all_vals_rank[cind])
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$value[word_rows])
df.s2$s1_exposures[i] = ifelse(is.na(cind), NA, df.words$exposures[word_rows])
df.s2$s1_chosen[i] = ifelse(is.na(cind), NA, df.words$numChosen[word_rows])
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # don't use that ind for anything serious
doubled = ifelse(is.na(choice_real_ind), NA, ifelse(is.na(lead(choice_real_ind)), F, choice_real_ind == lead(choice_real_ind)) |
ifelse(is.na(lag(choice_real_ind)), F, choice_real_ind == lag(choice_real_ind))),
bonus_value = ifelse(is.na(choice_real_ind), 0, ifelse(doubled, 0, s2_value)),
s1_val_high = s1_value > 5)
df.mem = df.s2 %>% filter(question == 'Memory')
df.s2.subj = df.s2 %>% filter(subject %in% df.demo$subject) %>%
group_by(subject) %>%
summarize(s2_bonus = sum(bonus_value), rt = mean(rt) / 1000,
comp_check_pass = mean(comp_check_pass),
comp_check_rt = mean(comp_check_rt) / 1000,
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T),
s1_val_high = mean(s1_val_high, na.rm = T),
s2_val = mean(rank_value, na.rm = T))
## poss
df.poss = df.poss.raw %>% filter(subject %in% subjlist)
df.poss.prac = df.poss %>% filter(practice == 1)
df.poss = df.poss %>% filter(practice == 0)
df.poss$prompt = toupper(df.poss$prompt)
for (i in 1:nrow(df.poss)) {
subj.name = df.poss$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = df.poss$prompt[i]
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
word_rows = subj.name == df.words$subject & creal == df.words$word
s1_val = ifelse(is.na(cind), -1, df.words$value[word_rows])
df.poss$s1_value[i] = s1_val
df.poss$s1_exposures[i] = ifelse(is.na(cind) | s1_val == -1, NA, df.words$exposures[word_rows])
df.poss$s1_chosen[i] = ifelse(is.na(cind) | s1_val == -1, NA, df.words$numChosen[word_rows])
}
df.poss$s1_value = factor(df.poss$s1_value, levels = c(-1, 5, 0, 1, 9, 10), labels = c('absent', 'grey', 'low1', 'low2', 'high1', 'high2'))
levels(df.poss$s1_value) = list(low=c('low1','low2'), high=c('high1','high2'), absent='absent')
df.poss.prac.subj = df.poss.prac %>% group_by(subject) %>%
summarize(correct = mean(correct))
df.poss.subj = df.poss %>% group_by(subject) %>%
summarize(pctNA = mean(choice == -1))
## Compute recalled
recalled = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.mem), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.mem)) {
subj.name = df.mem$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
words_temp = trimws(as.string.vector(df.mem$choice[i]))
val_temp = as.numeric(trimws(as.string.vector(df.mem$scratch[i])))
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
if (recalled[i,j]) {
true_val = df.words.temp$value[df.words.temp$word_ind  == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 2
}
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
## Compute exclusion
include_rows = NULL
include_names = NULL
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
if (df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctChoseBetter < .6 || df.s1.subj.temp$numTrials != nTrials || df.demo$write_down[subj] == 'Yes' ||
df.s2.subj.temp$comp_check_pass < .5 || df.s2.subj.temp$numRepeats > 2 || sum(recalled[subj,]) < 5 || df.s2.subj.temp$numNAs > 4) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
subj
subj.name
View(df.s1.subj)
View(df.demo)
View(df.s1.raw)
View(df.s1)
any(subjlist == 'A141N2XGQXKPME')
View(df.demo)
df.demo = read.csv(paste0(path, 'demo.csv'), stringsAsFactors = F) %>% arrange(subject) %>% mutate(total_time_real = total_time / 60000)
df.words.raw = read.csv(paste0(path, 'words.csv'), stringsAsFactors = F) %>% arrange(subject, word_ind)
df.s1.raw = read.csv(paste0(path, 's1.csv'), stringsAsFactors = F) %>% arrange(subject)
df.s2.raw = read.csv(paste0(path, 's2.csv'), stringsAsFactors = F) %>% arrange(subject)
df.poss.raw = read.csv(paste0(path, 'poss.csv'), stringsAsFactors = F) %>% arrange(subject)
subjlist = df.demo$subject
#df.words.subj = df.words.raw %>% group_by(subject) %>% summarize(num = n()) %>% filter(num == 14)
#subjlist = intersect(df.demo$subject, unique(df.words.subj$subject))
## words
df.words = df.words.raw %>% mutate(doubled = ifelse(is.na(lead(word)), FALSE, word == lead(word) & subject == lead(subject))) %>%
filter(doubled == FALSE & subject %in% subjlist) %>%
mutate(s1_val_high = value > 5, numChosen = 0)
## s1
df.s1 = df.s1.raw %>% filter(subject %in% subjlist) %>%
mutate(correct_word = ain(toupper(resp), word, maxDist = 2), correct_val = resp2 == value, word_chosen = ifelse(choice, alt, word),
s1_val_high = value > 5)
for (i in 1:nrow(df.s1)) {
subj = df.s1$subject[i]
word = df.s1$word[i]
alt = df.s1$alt[i]
choice = df.s1$choice[i]
df.s1$word_value[i] = df.words$value[df.words$subject == subj & df.words$word == word]
df.s1$alt_value[i] = alt
df.s1$word_better[i] = df.s1$word_value[i] > df.s1$alt_value[i]
df.s1$chose_better[i] = ifelse(df.s1$word_better[i], !choice, choice)
}
# get numChosen & cors
df.s1.subjword = df.s1 %>% group_by(subject, word_chosen) %>% summarize(numChosen = n())
for (i in 1:nrow(df.words)) {
subjword_rows = df.s1.subjword$subject == df.words$subject[i] & df.s1.subjword$word_chosen == df.words$word[i]
df.words$numChosen[i] = ifelse(any(subjword_rows), df.s1.subjword$numChosen[subjword_rows], NA)
df.words$numChosen_high[i] = df.words$numChosen[i] > 6
}
df.words.subj = df.words %>% group_by(subject) %>% summarize(cor = cor(value, numChosen))
# get pctCorrects
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(pctCorrect_words = mean(correct_word, na.rm = T), pctCorrect_val = mean(correct_val, na.rm = T), numTrials = n(),
pctHighVal = mean(s1_val_high), pctChoseBetter = mean(chose_better))
## s2
df.s2 = df.s2.raw %>% filter(subject %in% subjlist)
# Mutate df.s2
df.s2$choice = toupper(df.s2$choice)
df.s2$scratch = gsub("[.]", ",", toupper(as.character(df.s2$scratch)))
df.s2$all_values = as.character(df.s2$all_values)
df.s2$rank_value = NULL
df.s2$num_ties = NULL
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = df.s2$choice[i]
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
all_vals = as.numeric.vector(df.s2$all_values[i])
#all_vals = rewards_te[qvec[df.s2$question_ind[i] + 1], ] * mult[df.s2$question_ind[i] + 1]
#df.s2$all_values[i] = paste0('[', toString(all_vals), ']')
all_vals_rank = rank(all_vals, ties.method = 'max')
s2_val = ifelse(is.na(cind), NA, all_vals[cind])
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$choice_real[i] = creal
df.s2$choice_real_ind[i] = cind
df.s2$s2_value[i] = s2_val
df.s2$rank_value[i] = ifelse(is.na(cind), NA, all_vals_rank[cind])
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$value[word_rows])
df.s2$s1_exposures[i] = ifelse(is.na(cind), NA, df.words$exposures[word_rows])
df.s2$s1_chosen[i] = ifelse(is.na(cind), NA, df.words$numChosen[word_rows])
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # don't use that ind for anything serious
doubled = ifelse(is.na(choice_real_ind), NA, ifelse(is.na(lead(choice_real_ind)), F, choice_real_ind == lead(choice_real_ind)) |
ifelse(is.na(lag(choice_real_ind)), F, choice_real_ind == lag(choice_real_ind))),
bonus_value = ifelse(is.na(choice_real_ind), 0, ifelse(doubled, 0, s2_value)),
s1_val_high = s1_value > 5)
df.mem = df.s2 %>% filter(question == 'Memory')
df.s2.subj = df.s2 %>% filter(subject %in% df.demo$subject) %>%
group_by(subject) %>%
summarize(s2_bonus = sum(bonus_value), rt = mean(rt) / 1000,
comp_check_pass = mean(comp_check_pass),
comp_check_rt = mean(comp_check_rt) / 1000,
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T),
s1_val_high = mean(s1_val_high, na.rm = T),
s2_val = mean(rank_value, na.rm = T))
## poss
df.poss = df.poss.raw %>% filter(subject %in% subjlist)
df.poss.prac = df.poss %>% filter(practice == 1)
df.poss = df.poss %>% filter(practice == 0)
df.poss$prompt = toupper(df.poss$prompt)
for (i in 1:nrow(df.poss)) {
subj.name = df.poss$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = df.poss$prompt[i]
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
word_rows = subj.name == df.words$subject & creal == df.words$word
s1_val = ifelse(is.na(cind), -1, df.words$value[word_rows])
df.poss$s1_value[i] = s1_val
df.poss$s1_exposures[i] = ifelse(is.na(cind) | s1_val == -1, NA, df.words$exposures[word_rows])
df.poss$s1_chosen[i] = ifelse(is.na(cind) | s1_val == -1, NA, df.words$numChosen[word_rows])
}
df.poss$s1_value = factor(df.poss$s1_value, levels = c(-1, 5, 0, 1, 9, 10), labels = c('absent', 'grey', 'low1', 'low2', 'high1', 'high2'))
levels(df.poss$s1_value) = list(low=c('low1','low2'), high=c('high1','high2'), absent='absent')
df.poss.prac.subj = df.poss.prac %>% group_by(subject) %>%
summarize(correct = mean(correct))
df.poss.subj = df.poss %>% group_by(subject) %>%
summarize(pctNA = mean(choice == -1))
## Compute recalled
recalled = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.mem), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.mem)) {
subj.name = df.mem$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
words_temp = trimws(as.string.vector(df.mem$choice[i]))
val_temp = as.numeric(trimws(as.string.vector(df.mem$scratch[i])))
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
if (recalled[i,j]) {
true_val = df.words.temp$value[df.words.temp$word_ind  == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 2
}
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
include_rows = NULL
include_names = NULL
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
if (df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctChoseBetter < .6 || df.s1.subj.temp$numTrials != nTrials || df.demo$write_down[subj] == 'Yes' ||
df.s2.subj.temp$comp_check_pass < .5 || df.s2.subj.temp$numRepeats > 2 || sum(recalled[subj,]) < 5 || df.s2.subj.temp$numNAs > 4) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
df.poss.filt = df.poss %>% filter(subject %in% include_names)
df.s2.filt = df.s2 %>% filter(subject %in% include_names)
df.s1.filt = df.s1 %>% filter(subject %in% include_names)
df.words.filt = df.words %>% filter(subject %in% include_names)
# what affected recall?
nrecall = rowSums(recalled[include_rows,])
mean(nrecall)
m.recall = glmer(recall ~ s1_val_high + (1 + s1_val_high | subject) + (1 | word),
data = df.words.filt, family = binomial)
summary(m.recall)
df.poss.collapsed = df.poss.filt %>%
filter(choice != -1) %>%
mutate(choice = ifelse(choice == 1, 0, 1)) %>%
group_by(subject, cond, s1_value) %>%
summarize(choice = mean(choice))
df.poss.graph = df.poss.collapsed %>% group_by(cond, s1_value) %>%
summarize(choice.mean = mean(choice), choice.se = se(choice))
ggplot(df.poss.graph, aes(x = s1_value, y = choice.mean, group = cond, fill = cond)) +
geom_bar(stat = "identity", position = dodge) +
geom_errorbar(aes(ymax = choice.mean + choice.se, ymin = choice.mean - choice.se), width = .5, position = dodge) +
xlab('') + ylab('')
df.poss.subj.filt = df.poss.collapsed %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
histogram(~ df.poss.subj.filt$val | df.poss.subj.filt$cond)
ezANOVA(data.frame(df.poss.collapsed %>% filter(s1_value %in% c('low', 'high'))), choice, wid = subject, within = s1_value, between = cond)
df.poss.graph
df.poss.subj.filt = df.poss.collapsed %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
ezANOVA(data.frame(df.poss.collapsed %>% filter(s1_value %in% c('low', 'high'))), choice, wid = subject, within = s1_value, between = cond)
View(df.poss.collapsed)
View(df.poss.collapsed %>% filter(s1_value %in% c('low', 'high')))
ezANOVA(data.frame(df.poss.collapsed %>% filter(s1_value %in% c('low', 'high'))), choice, wid = subject, within = s1_value, between = cond)
summary(lmer(choice ~ s1_value * cond + (1 | subject), data = df.poss.collapsed %>% filter(s1_value %in% c('low', 'high'))))
df.poss.subj.filt = df.poss.collapsed %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
df.poss.subj.filt = df.poss.collapsed %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
View(df.poss.collapsed)
df.poss.subj.filt = df.poss.collapsed %>% group_by(subject) %>% summarize(num = n())#val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
View(df.poss.subj.filt)
any(df.poss.subj.filt$num != 3)
which(df.poss.subj.filt$num != 3)
View(df.poss.subj.filt)
View(df.poss)
df.poss.subj = df.poss %>% group_by(subject) %>%
summarize(pctNA = mean(choice == -1), numCompleted = n())
View(df.poss.subj)
which(df.poss.subj$numCompleted != 21)
## Compute exclusion
include_rows = NULL
include_names = NULL
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
if (df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctChoseBetter < .6 || df.s1.subj.temp$numTrials != nTrials || df.demo$write_down[subj] == 'Yes' ||
df.s2.subj.temp$comp_check_pass < .5 || df.s2.subj.temp$numRepeats > 2 || sum(recalled[subj,]) < 5 || df.s2.subj.temp$numNAs > 4 || df.poss.subj$numCompleted != 21) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
df.poss.filt = df.poss %>% filter(subject %in% include_names)
df.s2.filt = df.s2 %>% filter(subject %in% include_names)
df.s1.filt = df.s1 %>% filter(subject %in% include_names)
df.words.filt = df.words %>% filter(subject %in% include_names)
# what affected recall?
nrecall = rowSums(recalled[include_rows,])
mean(nrecall)
m.recall = glmer(recall ~ s1_val_high + (1 + s1_val_high | subject) + (1 | word),
data = df.words.filt, family = binomial)
summary(m.recall)
df.poss.collapsed = df.poss.filt %>%
filter(choice != -1) %>%
mutate(choice = ifelse(choice == 1, 0, 1)) %>%
group_by(subject, cond, s1_value) %>%
summarize(choice = mean(choice))
df.poss.graph = df.poss.collapsed %>% group_by(cond, s1_value) %>%
summarize(choice.mean = mean(choice), choice.se = se(choice))
ggplot(df.poss.graph, aes(x = s1_value, y = choice.mean, group = cond, fill = cond)) +
geom_bar(stat = "identity", position = dodge) +
geom_errorbar(aes(ymax = choice.mean + choice.se, ymin = choice.mean - choice.se), width = .5, position = dodge) +
xlab('') + ylab('')
df.poss.subj.filt = df.poss.collapsed %>% group_by(subject) %>% summarize(num = n())#val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
histogram(~ df.poss.subj.filt$val | df.poss.subj.filt$cond)
df.poss.subj.filt = df.poss.collapsed %>% group_by(subject) %>% summarize(num = n())#val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
View(df.poss.subj.filt)
which(df.poss.subj.filt$num != 3)
df.poss.collapsed = df.poss %>%
filter(choice != -1) %>%
mutate(choice = ifelse(choice == 1, 0, 1)) %>%
group_by(subject, cond, s1_value) %>%
summarize(choice = mean(choice))
df.poss.graph = df.poss.collapsed %>% group_by(cond, s1_value) %>%
summarize(choice.mean = mean(choice), choice.se = se(choice))
df.poss.bycond = df.poss.collapsed %>% group_by(subject) %>% summarize(numTypes = n())
df.poss.collapsed = df.poss %>%
filter(choice != -1) %>%
mutate(choice = ifelse(choice == 1, 0, 1)) %>%
group_by(subject, cond, s1_value) %>%
summarize(choice = mean(choice))
df.poss.bycond = df.poss.collapsed %>% group_by(subject) %>% summarize(numTypes = n())
include_rows = NULL
include_names = NULL
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
if (df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctChoseBetter < .6 || df.s1.subj.temp$numTrials != nTrials || df.demo$write_down[subj] == 'Yes' ||
df.s2.subj.temp$comp_check_pass < .5 || df.s2.subj.temp$numRepeats > 2 || sum(recalled[subj,]) < 5 || df.s2.subj.temp$numNAs > 4 || df.poss.subj$numCompleted != 21 || df.poss.bycond$numTypes != 3) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
df.poss.collapsed.filt = df.poss.collapsed %>% filter(subject %in% include_names)
df.poss.graph = df.poss.collapsed.filt %>% group_by(cond, s1_value) %>%
summarize(choice.mean = mean(choice), choice.se = se(choice))
ggplot(df.poss.graph, aes(x = s1_value, y = choice.mean, group = cond, fill = cond)) +
geom_bar(stat = "identity", position = dodge) +
geom_errorbar(aes(ymax = choice.mean + choice.se, ymin = choice.mean - choice.se), width = .5, position = dodge) +
xlab('') + ylab('')
df.poss.subj.filt = df.poss.collapsed %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
histogram(~ df.poss.subj.filt$val | df.poss.subj.filt$cond)
df.poss.subj.filt = df.poss.collapsed.filt %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
histogram(~ df.poss.subj.filt$val | df.poss.subj.filt$cond)
df.poss.subj.filt = df.poss.collapsed.filt %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
ezANOVA(data.frame(df.poss.collapsed.filt %>% filter(s1_value %in% c('low', 'high'))), choice, wid = subject, within = s1_value, between = cond)
df.poss.collapsed.filt = df.poss.collapsed %>% filter(subject %in% include_names)
df.poss.subj.filt = df.poss.collapsed.filt %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
ezANOVA(data.frame(df.poss.collapsed.filt %>% filter(s1_value %in% c('low', 'high'))), choice, wid = subject, within = s1_value, between = cond)
test = df.poss.collapsed.filt %>% group_by(subject) %>% summarize(test = n())
test$test
include_rows = NULL
include_names = NULL
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
df.poss.subj.temp = df.poss.subj %>% filter(subject == subj.name)
df.poss.bycond.temp = df.poss.bycond %>% filter(subject == subj.name)
if (df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctChoseBetter < .6 || df.s1.subj.temp$numTrials != nTrials || df.demo$write_down[subj] == 'Yes' ||
df.s2.subj.temp$comp_check_pass < .5 || df.s2.subj.temp$numRepeats > 2 || sum(recalled[subj,]) < 5 || df.s2.subj.temp$numNAs > 4 || df.poss.subj.temp$numCompleted != 21 || df.poss.bycond.temp$numTypes != 3) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
df.poss.filt = df.poss %>% filter(subject %in% include_names)
df.poss.collapsed.filt = df.poss.collapsed %>% filter(subject %in% include_names)
df.s2.filt = df.s2 %>% filter(subject %in% include_names)
df.s1.filt = df.s1 %>% filter(subject %in% include_names)
df.words.filt = df.words %>% filter(subject %in% include_names)
df.poss.subj.filt = df.poss.collapsed.filt %>% group_by(subject, cond) %>% summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'])
histogram(~ df.poss.subj.filt$val | df.poss.subj.filt$cond)
ezANOVA(data.frame(df.poss.collapsed.filt %>% filter(s1_value %in% c('low', 'high'))), choice, wid = subject, within = s1_value, between = cond)
numGoodSubj = length(include_names)
df.cor = data.frame(poss_measure = numeric(numGoodSubj), s2_measure = numeric(numGoodSubj), time_cond = factor(numGoodSubj))
df.cor$poss_measure = df.poss.subj.filt$val
df.cor$s2_measure = df.s2.subj.filt$s1_val_high
df.cor$time_cond = df.poss.subj.filt$cond
m.cor = lm(s2_measure ~ poss_measure * time_cond, data = df.cor)
summary(m.cor)
df.cor = data.frame(poss_measure = numeric(numGoodSubj), s2_measure = numeric(numGoodSubj), time_cond = factor(numGoodSubj))
df.cor$poss_measure = df.poss.subj.filt$val
df.cor$s2_measure = df.s2.subj.filt$s1_val_high
df.cor$time_cond = df.poss.subj.filt$cond
df.s2.subj.filt = df.s2.subj %>% filter(subject %in% include_names)
df.cor = data.frame(poss_measure = numeric(numGoodSubj), s2_measure = numeric(numGoodSubj), time_cond = factor(numGoodSubj))
df.cor$poss_measure = df.poss.subj.filt$val
df.cor$s2_measure = df.s2.subj.filt$s1_val_high
df.cor$time_cond = df.poss.subj.filt$cond
m.cor = lm(s2_measure ~ poss_measure * time_cond, data = df.cor)
summary(m.cor)
df.cor.pressure = df.cor %>% filter(time_cond == 'pressure')
cor.test(df.cor.pressure$s2_measure, df.cor.pressure$poss_measure)
# decisions
hist(df.s2.filt$rank_value, breaks = 15, main = "S2 ranks of words chosen in S2", xlab = "S2 rank")
mean(df.s2.filt$rank_value, na.rm = T)
t.test(df.s2.subj.filt$s1_val_high - .5)
t.test(df.s2.subj.filt$s2_val - 7)
t.test(df.s2.subj.filt$s1_val_high - .5)
ggplot(df.s2.subj.filt, aes(x = s1_val_high)) + geom_histogram(col = 'black', fill = 'blue')
# order
histogram(~ order | value, df.words.filt[df.words.filt$recall == T, ])
# order
histogram(~ order | high_val, df.words.filt[df.words.filt$recall == T, ])
View(df.words.filt)
# order
histogram(~ order | s1_val_high, df.words.filt[df.words.filt$recall == T, ])
m.order = lmer(order ~ s1_val_high + (s1_val_high | subject) + (s1_val_high | word),
data = df.words.filt[df.words.filt$recall == T, ])
summary(m.order)
m.order = lmer(order ~ s1_val_high + (1 | subject) + (0 + s1_val_high | subject) + (s1_val_high | word),
data = df.words.filt[df.words.filt$recall == T, ])
summary(m.order)
coefs = coef(m.order)$subject$high_valTRUE
cor.test(coefs, df.cor.pressure$s2_measure)
length(coefs)
coefs
coefs = coef(m.order)$subject$s1_val_highTRUE
cor.test(coefs, df.cor.pressure$s2_measure)
length(coefs)
length(df.cor.pressure$s2_measure)
cor.test(coefs, df.cor$s2_measure)
cor.test(coefs, df.cor$poss_measure)
df.demo = df.demo %>% mutate(bonus = round(s1_bonus / (pointsPerCent * 100), 2))
write.table(df.demo %>% select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses - cs_wg_v10_real2.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
# Save analysis
save.image(paste0(path, 'analysis.rdata'))
# Save for modeling
rewards_tr = matrix(0, nrow = sum(include_rows), ncol = numWords)
ind = 1
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
if (subj.name %in% include_names) {
df.words.temp = df.words %>% filter(subject == subj.name)
for (word in 1:numWords) {
rewards_tr[ind, word] = df.words.temp$value[word]
}
ind = ind + 1
}
}
write.csv(rewards_tr, paste0(path, 'rewards_tr.csv'), row.names = F)
write.csv(recalled_ever[include_rows, ] * 1, paste0(path, 'recalled.csv'), row.names = F)
df.modeling = df.s2 %>% filter(subject %in% include_names & !is.na(choice_real_ind)) %>%
mutate(all_values_nocomma = gsub(",", " ", all_values)) %>%
select(s2_subj_ind, choice_real_ind, all_values_nocomma)
write.table(df.modeling, paste0(path, 'choices.csv'), row.names = F, col.names = F, sep=",")
