axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=24, face = "bold"),
axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20),
plot.title = element_text(size = 26, face = "bold", vjust = 1))
df.cors.2d = df.cors %>% mutate_at(vars(x,a),funs(factor(.,labels = paste0(seq(10,100,10),"%"))))
splot = function(aesthetic) {
ggplot(df.cors, aesthetic) +
geom_point(size = 3) +
geom_smooth(method = "lm") +
xlim(0,1) +
ylim(0,1) +
labs(x = "", y = "") +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_rect(color = 'black', fill = NA, size = 3),panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1))
}
# AFI model, unnormed
splot(aes(x=ours,y=actual))
splot = function(aesthetic) {
ggplot(df.cors, aesthetic) +
geom_point(size = 3) +
geom_smooth(method = "lm") +
xlim(0,1) +
ylim(0,1) +
labs(x = "", y = "") +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1))
}
# AFI model, unnormed
splot(aes(x=ours,y=actual))
ggplot(df.cors, aesthetic) +
geom_point(size = 3) +
geom_smooth(method = "lm") +
xlim(0,1) +
ylim(0,1) +
labs(x = "", y = "") +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),panel.background = element_blank())
splot = function(aesthetic) {
ggplot(df.cors, aesthetic) +
geom_point(size = 3) +
geom_smooth(method = "lm") +
xlim(0,1) +
ylim(0,1) +
labs(x = "", y = "") +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),panel.background = element_blank())
}
# AFI model, unnormed
splot(aes(x=ours,y=actual))
# AFI model, normed
splot(aes(x=ours_normed,y=actual))
# sp
splot(aes(x=sp,y=actual))
# dp / power-pc
splot(aes(x=dp,y=actual))
# halpern & hitchcock
splot(aes(x=hh,y=actual))
# icard
splot(aes(x=icard,y=actual))
# others, normed
splot(aes(x=sp_normed,y=actual))
rm(list=ls())
require(readxl)
require(ggplot2)
require(scales)
require(dplyr)
se <- function(x) {sd(x) / sqrt(length(x))};
dodge <- position_dodge(width=0.9)
df = read_excel('ikk2.xlsx') %>% filter(MTurkExcl == 1) %>%
group_by(ConDis, NormVio) %>% summarize(rating = mean(Rating), rating.se = se(Rating)) %>%
mutate(NormVio = factor(NormVio))
setwd("~/Me/Psychology/Projects/causality/paper/psych-review/data")
require(readxl)
require(ggplot2)
require(scales)
require(dplyr)
se <- function(x) {sd(x) / sqrt(length(x))};
dodge <- position_dodge(width=0.9)
df = read_excel('ikk2.xlsx') %>% filter(MTurkExcl == 1) %>%
group_by(ConDis, NormVio) %>% summarize(rating = mean(Rating), rating.se = se(Rating)) %>%
mutate(NormVio = factor(NormVio))
ggplot(df %>% filter(ConDis == 1), aes(x = NormVio, y = rating, fill = NormVio)) +
geom_col(color = 'black') +
geom_errorbar(aes(ymin = rating - rating.se, ymax = rating + rating.se), width = .3) +
labs(x='',y='') +
theme_bw() +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = 'none',panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),panel.background = element_blank()) +
scale_y_continuous(limits = c(1,7), oob=rescale_none)
df2 = df
df2$rating[1] = 5.2
df2$rating[2] = 2.9
df2$rating.se[1] = .29
df2$rating.se[2] = .32
ggplot(df2 %>% filter(ConDis == 1), aes(x = NormVio, y = rating, fill = NormVio)) +
geom_col(color='black') +
geom_errorbar(aes(ymin = rating - rating.se, ymax = rating + rating.se), width = .3) +
labs(x='',y='') +
theme_bw() +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = 'none',panel.border = element_blank(), axis.line = element_line(colour = "black", size = 1),panel.background = element_blank()) +
scale_y_continuous(limits = c(1,7), oob=rescale_none)
rm(list=ls())
# setup -------------------------------------------------------------------
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(mlogit)
require(lattice)
require(stringdist)
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=18, face = "bold"), axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20), plot.title = element_text(size = 26, face = "bold", vjust = 1))
setwd("~/Me/Psychology/Projects/choicesets/git")
getIndex = function(x, list) {
y = numeric(length(x))
for (j in 1:length(x)) {
if (any(list %in% x[j])) {
y[j] = which(list %in% x[j])
} else {
y[j] = NA
}
}
return(y)
}
as.string.vector = function(x) {
temp = strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]
return(substr(temp, 2, nchar(temp) - 1))
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]))
}
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFval + MBval | -1, df.m, panel = T,
rpar = c(MFval = "n", MBval = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
se = function(x) {return(sd(x) / sqrt(length(x)))}
dodge <- position_dodge(width=0.9)
load("~/Me/Psychology/Projects/choicesets/git/data/value/v2/real1/analysis.rdata")
df.sum = df.logit %>% filter(Question %in% c(2,3)) %>%
group_by(MFhigh,MBhigh) %>% summarize(Choice.mean = mean(Choice)) #%>% mutate(Choice.mean = Choice.mean * ifelse(MFval %in% c(0,10), 2/3, 1))
ggplot(data = df.sum, aes(x = MBhigh, y = Choice.mean, group = MFhigh, colour = MFhigh)) +
geom_point(aes(size = 2)) + geom_line()
df.logit = df.logit %>% mutate(MFcent = MFval - mean(MFval), MBcent = MBval - mean(MBval), Int = MFcent * MBcent)
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFcent + MBcent + Int | -1, df.m, panel = T,
rpar = c(MFcent = "n", MBcent = "n", Int = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
m.real = runLogit(df.logit %>% filter(Question %in% c(2,3)))
summary(m.real)
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFval + MBval | -1, df.m, panel = T,
rpar = c(MFval = "n", MBval = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
rewards_tr = matrix(0, nrow = sum(include_rows), ncol = numWords)
ind = 1
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
if (subj.name %in% include_names) {
df.words.temp = df.words %>% filter(subject == subj.name)
for (word in 1:numWords) {
rewards_tr[ind, word] = ifelse(type == 1, df.words.temp$exposures[word], df.words.temp$value[word])
}
ind = ind + 1
}
}
write.csv(rewards_tr, paste0(path, 'rewards_s1.csv'), row.names = F)
write.csv(recalled_ever[include_rows, ] * 1, paste0(path, 'recalled.csv'), row.names = F)
df.modeling = df.s2 %>% filter(subject %in% include_names & !is.na(choice_real_ind) & question_ind %in% c(2,3)) %>%
mutate(all_values_nocomma = gsub(",", " ", all_values)) %>%
dplyr::select(s2_subj_ind, choice_real_ind, all_values_nocomma)
write.table(df.modeling, paste0(path, 'choices.csv'), row.names = F, col.names = F, sep=",")
View(df.s2)
df.s2 %>% filter(question_ind %in% c(2,3))
df.s2 %>% filter(question_ind %in% c(2,3)) %>% group_by(subject)
df.s2 %>% filter(question_ind %in% c(2,3)) %>% group_by(subject) %>% summarize(anyGood = any(choice_real_ind))
any(NA,NA)
!is.na(c(NA,NA))
df.s2 %>% filter(question_ind %in% c(2,3)) %>% group_by(subject) %>% summarize(anyGood = any(!is.na(choice_real_ind)))
## save for modeling
df.test = df.s2 %>% filter(question_ind %in% c(2,3)) %>% group_by(subject) %>% summarize(anyGood = any(!is.na(choice_real_ind)))
## save for modeling
df.test = df.s2 %>% filter(question_ind %in% c(2,3)) %>% group_by(subject) %>% summarize(anyGood = any(!is.na(choice_real_ind)))
rewards_tr = matrix(0, nrow = sum(include_rows), ncol = numWords)
ind = 1
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
if (subj.name %in% include_names & df.test$anyGood[df.test$subject == subj.name]) {
df.words.temp = df.words %>% filter(subject == subj.name)
for (word in 1:numWords) {
rewards_tr[ind, word] = ifelse(type == 1, df.words.temp$exposures[word], df.words.temp$value[word])
}
ind = ind + 1
}
}
write.csv(rewards_tr, paste0(path, 'rewards_s1.csv'), row.names = F)
write.csv(recalled_ever[include_rows & df.test$anyGood, ] * 1, paste0(path, 'recalled.csv'), row.names = F)
df.modeling = df.s2 %>% filter(subject %in% include_names & !is.na(choice_real_ind) & question_ind %in% c(2,3)) %>%
mutate(all_values_nocomma = gsub(",", " ", all_values)) %>%
dplyr::select(s2_subj_ind, choice_real_ind, all_values_nocomma)
write.table(df.modeling, paste0(path, 'choices.csv'), row.names = F, col.names = F, sep=",")
sum(df.test$anyGood)
sum(!df.test$anyGood)
sum(include_rows)
sum(include_rows & df.test$anyGood)
sum(include_rows && df.test$anyGood)
sum(include_rows & df.test$anyGood)
any(include_rows & !df.test$anyGood)
df.test = df.s2 %>% filter(question_ind %in% c(2,3)) %>% group_by(subject) %>% summarize(anyGood = any(!is.na(choice_real_ind)))
rewards_tr = matrix(0, nrow = sum(include_rows), ncol = numWords)
ind = 1
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
if (subj.name %in% include_names & df.test$anyGood[df.test$subject == subj.name]) {
df.words.temp = df.words %>% filter(subject == subj.name)
for (word in 1:numWords) {
rewards_tr[ind, word] = ifelse(type == 1, df.words.temp$exposures[word], df.words.temp$value[word])
}
ind = ind + 1
}
}
write.csv(rewards_tr, paste0(path, 'rewards_s1.csv'), row.names = F)
write.csv(recalled_ever[include_rows & df.test$anyGood, ] * 1, paste0(path, 'recalled.csv'), row.names = F)
df.modeling = df.s2 %>% filter(subject %in% include_names & !is.na(choice_real_ind) & question_ind %in% c(2,3)) %>%
mutate(all_values_nocomma = gsub(",", " ", all_values)) %>%
dplyr::select(s2_subj_ind, choice_real_ind, all_values_nocomma)
write.table(df.modeling, paste0(path, 'choices.csv'), row.names = F, col.names = F, sep=",")
rm(list=ls())
# setup -------------------------------------------------------------------
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(mlogit)
require(lattice)
require(stringdist)
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=18, face = "bold"), axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20), plot.title = element_text(size = 26, face = "bold", vjust = 1))
setwd("~/Me/Psychology/Projects/choicesets/git")
getIndex = function(x, list) {
y = numeric(length(x))
for (j in 1:length(x)) {
if (any(list %in% x[j])) {
y[j] = which(list %in% x[j])
} else {
y[j] = NA
}
}
return(y)
}
as.string.vector = function(x) {
temp = strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]
return(substr(temp, 2, nchar(temp) - 1))
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]))
}
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFval + MBval | -1, df.m, panel = T,
rpar = c(MFval = "n", MBval = "n"), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
se = function(x) {return(sd(x) / sqrt(length(x)))}
dodge <- position_dodge(width=0.9)
# import data -------------------------------------------------------------
versions = c('value1', 'value2', 'freq', 'confounded', 'stripped')
version = versions[1]
if (version == 'value1') {
numWords = 14;
numTrials = 112;
minNAs = 4;
path = 'data/value/v1/real2/'
pointsPerCent = 10;
pointsPerWord = 10; # for memory condition
numRealQuestions = 9
type = 0; # 0 is value, 1 is freq, 2 is stripped
} else if (version == 'value2') {
numWords = 14;
numTrials = 112;
minNAs = 2;
path = 'data/value/v2/real1/'
pointsPerCent = 10;
pointsPerWord = 10; # for memory condition
numRealQuestions = 5
type = 0;
} else if (version == 'freq') {
numWords = 14;
numTrials = 112;
minNAs = 4;
path = 'data/frequency/v1/real1/'
numRealQuestions = 9
type = 1;
} else if (version == 'confounded') {
numWords = 14;
numTrials = 91;
minNAs = 4;
path = 'data/confounded/v1/real1/'
numRealQuestions = 9
type = 0;
} else if (version == 'stripped') {
numWords = 14;
numTrials = 0;
minNAs = 1;
path = 'data/value/v3/real2/'
type = 2;
numRealQuestions = 1;
}
# Load data
df.demo = read.csv(paste0(path, 'demo.csv'), stringsAsFactors = F) %>% arrange(subject) %>% mutate(total_time_real = total_time / 60000)
df.words.raw = read.csv(paste0(path, 'words.csv'), stringsAsFactors = F) %>% arrange(subject, word_ind)
if (type != 2) {
df.s1.raw = read.csv(paste0(path, 's1.csv'), stringsAsFactors = F) %>% arrange(subject);
} else {
df.s1.raw = data.frame(subject = numeric(), resp = numeric(), word = numeric(), resp2 = numeric(), value = numeric(), alt = numeric(),
choice = numeric());
}
df.s2.raw = read.csv(paste0(path, 's2.csv'), stringsAsFactors = F) %>% arrange(subject, question_order)
subjlist = df.demo$subject
## words
df.words = df.words.raw %>%
mutate(doubled = ifelse(is.na(lead(word)), FALSE, word == lead(word) & subject == lead(subject))) %>%
filter(doubled == FALSE & subject %in% subjlist)
for (i in 1:nrow(df.words)) {
df.words$high_value[i] = ifelse(type == 1, df.words$exposures[i] > 8, df.words$value[i] > 5)
if (type == 2) { # stripped-down version
valuelist = (df.words %>% filter(subject == df.words$subject[i]))$value
df.words$high_value[i] = ifelse(df.words$value[i] == median(valuelist), as.logical(runif(1) > .5), df.words$value[i] > median(valuelist))
}
}
## s1
df.s1 = df.s1.raw %>% filter(subject %in% subjlist) %>%
mutate(correct_word = ain(toupper(resp), word, maxDist = 2), correct_val = resp2 == value, word_chosen = ifelse(choice, alt, word))
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(pctCorrect_words = mean(correct_word, na.rm = T), pctCorrect_val = ifelse(type == 1, 1, mean(correct_val, na.rm = T)),
numTrials = n())
## s2
df.s2 = df.s2.raw %>% filter(subject %in% subjlist)
df.s2$choice = toupper(df.s2$choice)
df.s2$scratch = gsub("[.]", ",", toupper(as.character(df.s2$scratch)))
df.s2$all_values = as.character(df.s2$all_values)
df.s2$rank_value = NULL
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = df.s2$choice[i]
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
all_vals = as.numeric.vector(df.s2$all_values[i])
all_vals_rank = rank(all_vals, ties.method = 'max')
s2_val = ifelse(is.na(cind), NA, all_vals[cind])
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$choice_real[i] = creal
df.s2$choice_real_ind[i] = cind
df.s2$s2_value[i] = s2_val
df.s2$rank_value[i] = ifelse(is.na(cind), NA, all_vals_rank[cind])
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$value[word_rows])
df.s2$s1_exposures[i] = ifelse(is.na(cind), NA, df.words$exposures[word_rows])
df.s2$high_value[i] = ifelse(is.na(cind), NA, df.words$high_value[word_rows])#ifelse(type == 1, df.s2$s1_exposures[i] > 8, df.s2$s1_value[i] > 5)
df.s2$high_rank[i] = ifelse(is.na(cind), NA, df.s2$rank_value[i] > 7)
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # just for modeling
doubled = ifelse(is.na(choice_real_ind), NA, ifelse(is.na(lead(choice_real_ind)), F, choice_real_ind == lead(choice_real_ind)) |
ifelse(is.na(lag(choice_real_ind)), F, choice_real_ind == lag(choice_real_ind))),
bonus_value = ifelse(is.na(choice_real_ind), 0, ifelse(doubled, 0, s2_value)))
df.s2.subj = df.s2 %>% filter(subject %in% df.demo$subject) %>%
group_by(subject) %>%
summarize(s2_bonus = sum(bonus_value), rt = mean(rt) / 1000,
comp_check_pass = mean(comp_check_pass),
comp_check_rt = mean(comp_check_rt) / 1000,
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T),
s1_value = mean(s1_value, na.rm = T),
high_value = mean(high_value, na.rm = T),
rank_value = mean(rank_value, na.rm = T),
high_rank = mean(high_rank, na.rm = T))
df.s2.subj$mem_words = NULL
df.s2.subj$mem_vals = NULL
for (i in 1:nrow(df.s2.subj)) {
s2.filt = df.s2 %>% filter(subject == df.s2.subj$subject[i] & question == 'Memory')
df.s2.subj$mem_words[i] = ifelse(length(s2.filt$choice) == 0, NA, s2.filt$choice)
df.s2.subj$mem_vals[i] = ifelse(length(s2.filt$scratch) == 0, NA, s2.filt$scratch)
}
## Compute recalled
recalled = matrix(F, nrow = nrow(df.s2.subj), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.s2.subj), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.s2.subj), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.s2.subj)) {
subj.name = df.s2.subj$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
words_temp = trimws(as.string.vector(df.s2.subj$mem_words[i]))
val_temp = as.numeric(trimws(as.string.vector(df.s2.subj$mem_vals[i])))
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
if (recalled[i,j]) {
true_val = df.words.temp$value[df.words.temp$word_ind  == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 2
}
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
# exclusion ---------------------------------------------------------------
# Exclude if any of these: cor in s1 < .75, comp_check_pass < .5, pctCorrect_words < .75, pctCorrect_pts < .75, numNAs > 3, numRepeats > 2, numRecalled < 5
include_rows = NULL
include_names = NULL
for (subj in 1:length(subjlist)) {
subj.name = subjlist[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
df.demo.temp = df.demo %>% filter(subject == subj.name)
exclude = df.demo.temp$write_down == 'Yes' || df.s2.subj.temp$comp_check_pass < .5 || df.s2.subj.temp$numRepeats > 2 ||
df.s2.subj.temp$numNAs > minNAs || sum(recalled[subj,]) < 5
if (type != 2) {
exclude = exclude || df.s1.subj.temp$numTrials != numTrials || df.s1.subj.temp$pctCorrect_words < .75 ||
df.s1.subj.temp$pctCorrect_val < .75
}
if (exclude) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
View(df.s2)
df.test = df.s2 %>% filter(question_ind %in% c(2,4,5)) %>% group_by(subject) %>% summarize(anyGood = any(!is.na(choice_real_ind)))
rewards_tr = matrix(0, nrow = sum(include_rows), ncol = numWords)
ind = 1
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
if (subj.name %in% include_names & df.test$anyGood[df.test$subject == subj.name]) {
df.words.temp = df.words %>% filter(subject == subj.name)
for (word in 1:numWords) {
rewards_tr[ind, word] = ifelse(type == 1, df.words.temp$exposures[word], df.words.temp$value[word])
}
ind = ind + 1
}
}
write.csv(rewards_tr, paste0(path, 'rewards_s1.csv'), row.names = F)
write.csv(recalled_ever[include_rows & df.test$anyGood, ] * 1, paste0(path, 'recalled.csv'), row.names = F)
df.modeling = df.s2 %>% filter(subject %in% include_names & !is.na(choice_real_ind) & question_ind %in% c(2,3)) %>%
mutate(all_values_nocomma = gsub(",", " ", all_values)) %>%
dplyr::select(s2_subj_ind, choice_real_ind, all_values_nocomma)
write.table(df.modeling, paste0(path, 'choices.csv'), row.names = F, col.names = F, sep=",")
qlist = c(2,4,5)
df.test = df.s2 %>% filter(question_ind %in% qlist) %>% group_by(subject) %>% summarize(anyGood = any(!is.na(choice_real_ind)))
rewards_tr = matrix(0, nrow = sum(include_rows), ncol = numWords)
ind = 1
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
if (subj.name %in% include_names & df.test$anyGood[df.test$subject == subj.name]) {
df.words.temp = df.words %>% filter(subject == subj.name)
for (word in 1:numWords) {
rewards_tr[ind, word] = ifelse(type == 1, df.words.temp$exposures[word], df.words.temp$value[word])
}
ind = ind + 1
}
}
write.csv(rewards_tr, paste0(path, 'rewards_s1.csv'), row.names = F)
write.csv(recalled_ever[include_rows & df.test$anyGood, ] * 1, paste0(path, 'recalled.csv'), row.names = F)
df.modeling = df.s2 %>% filter(subject %in% include_names & !is.na(choice_real_ind) & question_ind %in% qlist) %>%
mutate(all_values_nocomma = gsub(",", " ", all_values)) %>%
dplyr::select(s2_subj_ind, choice_real_ind, all_values_nocomma)
write.table(df.modeling, paste0(path, 'choices.csv'), row.names = F, col.names = F, sep=",")
