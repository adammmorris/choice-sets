geom_smooth(method='lm')+
#xlab('Stage 2 value') + ylab('Prob. in choice set') +
#scale_y_continuous(breaks = c(0,1), limits = c(0,1)) +
#scale_x_continuous(breaks = c(1,26))# +
facet_wrap(~cond)
## plots!
# effect of stage 1 value on...
df.graph.s1 = df.words.filt %>% group_by(cond, s1_value) %>%
summarize(in.cs = mean(in.cs), in.cs.se = sqrt(in.cs * (1-in.cs) / n()),
chosen = mean(chosen, na.rm = T), chosen.se = sqrt(chosen * (1-chosen) / n()))
# choice sets
ggplot(df.graph.s1, aes(x = s1_value, y = in.cs)) +
geom_point(size = 5) + geom_line() +
geom_errorbar(aes(ymin = in.cs - in.cs.se, ymax = in.cs+in.cs.se), width = .2) +
geom_smooth(method='lm')+
#xlab('Stage 1 value') + ylab('Prob. in choice set') +
#scale_y_continuous(breaks = c(0,.4), limits = c(0,.4)) +
#scale_x_continuous(breaks = c(1,12))
facet_wrap(~cond)
# choice sets
ggplot(df.graph.s1, aes(x = s1_value, y = in.cs)) +
geom_point(size = 5) + geom_line() +
geom_errorbar(aes(ymin = in.cs - in.cs.se, ymax = in.cs+in.cs.se), width = .2) +
geom_smooth(method='lm')+
#xlab('Stage 1 value') + ylab('Prob. in choice set') +
scale_y_continuous(breaks = c(.2,.6), limits = c(.2,.6)) +
#scale_x_continuous(breaks = c(1,12))
facet_wrap(~cond)
# choice sets
ggplot(df.graph.s1, aes(x = s1_value, y = in.cs)) +
geom_point(size = 5) + geom_line() +
geom_errorbar(aes(ymin = in.cs - in.cs.se, ymax = in.cs+in.cs.se), width = .2) +
geom_smooth(method='lm')+
#xlab('Stage 1 value') + ylab('Prob. in choice set') +
scale_y_continuous(breaks = c(.3,.5), limits = c(.2,.6)) +
#scale_x_continuous(breaks = c(1,12))
facet_wrap(~cond)
# choice sets
ggplot(df.graph.s1, aes(x = s1_value, y = in.cs)) +
geom_point(size = 5) + geom_line() +
geom_errorbar(aes(ymin = in.cs - in.cs.se, ymax = in.cs+in.cs.se), width = .2) +
geom_smooth(method='lm')+
#xlab('Stage 1 value') + ylab('Prob. in choice set') +
scale_y_continuous(breaks = c(.3,.5), limits = c(.3,.5)) +
#scale_x_continuous(breaks = c(1,12))
facet_wrap(~cond)
# import data -------------------------------------------------------------
numWords = 12;
numTrials = 132;
minNAs = 1;
path = 'data/value/v7_conf/real1/'
pointsPerCent_s1 = 5;
pointsPerCent_s2 = 1;
pointsPerWord = 3; # for memory condition
allBonus = 25;
numRealQuestions = 1;
type = 0;
maxRepeats = 2;
numQuestions = 2;
# Load data
df.demo = read.csv(paste0(path, 'demo.csv'), stringsAsFactors = F) %>% arrange(subject) %>% mutate(total_time_real = total_time / 60000)
df.words.raw = read.csv(paste0(path, 'words.csv'), stringsAsFactors = F) %>% arrange(subject, word_ind)
df.s1.raw = read.csv(paste0(path, 's1.csv'), stringsAsFactors = F) %>% arrange(subject);
df.s2.raw = read.csv(paste0(path, 's2.csv'), stringsAsFactors = F) %>% arrange(subject, question_order)
subjlist = df.demo$subject
# words
df.words = df.words.raw %>% filter(subject %in% subjlist) %>%
mutate(repeated = word_ind == lead(word_ind)) %>%
filter(!repeated)
# s2
df.s2 = df.s2.raw %>% filter(subject %in% subjlist)
df.s2$choice = toupper(df.s2$choice)
df.s2$scratch = gsub("[.]", ",", toupper(as.character(df.s2$scratch)))
df.s2$all_values = as.character(df.s2$all_values)
df.s2$comp_check_pass = as.numeric(df.s2$comp_check_pass)
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = gsub("\n.*","",df.s2$choice[i])
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
if (is.na(cind)) {
# try scratch
c = gsub("\n.*","",df.s2$scratch[i])
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
}
df.s2$choice_real[i] = creal
df.s2$choice_real_ind[i] = cind
}
# df.s2.excl
df.s2.excl = df.s2 %>% filter(subject %in% subjlist) %>%
group_by(subject) %>%
summarize(comp_check_pass = mean(comp_check_pass[question_order == 0]),
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T),
numTrials = n(),
cond = cond[1])
# recall
recalled = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.s2.excl)) {
if (df.s2.excl$cond[i] == 'memory') {
subj.name = df.s2.excl$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
df.s2.temp.mem = df.s2.temp %>% filter(question == 'Memory')
words_temp = trimws(as.string.vector(df.s2.temp.mem$choice))
val_temp = as.numeric(trimws(as.string.vector(df.s2.temp.mem$scratch)))
val_temp[is.na(val_temp)] = -99
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
if (recalled[i,j]) {
true_val = df.words.temp$s1_value[df.words.temp$word_ind == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 1
}
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
}
for (i in 1:nrow(df.words)) {
subj = df.words$subject[i]
choice = (df.s2 %>% filter(subject == subj, question_order == 0))$choice_real
df.s2.temp = df.s2 %>% filter(subject == subj)
if (T) {
# which words were in cs
cs = (df.s2.temp %>% filter(question == 'choice-set'))$choice
cs = as.string.vector.noquotes(gsub('\"', '', cs))
for (j in 1:length(cs)) {
cs.split = strsplit(cs[j], ":")[[1]]
word = cs.split[1]
val = cs.split[2]
if (length(choice) > 0) {
df.words$in.cs[df.words$word == word & df.words$subject == subj] = ifelse(val == "1" | word == choice, T, ifelse(val == "0", F, NA))
} else {
df.words$in.cs[df.words$word == word & df.words$subject == subj] = NA
}
}
} else {
df.words$in.cs[i] = df.words$recall.ever[i]
}
}
# s1
df.s1 = df.s1.raw %>% filter(subject %in% subjlist) %>%
mutate(word_chosen = ifelse(choice, alt, word))
#newSubj = T
for (i in 1:nrow(df.s1)) {
subj = df.s1$subject[i]
#if (i > 1 && subj != df.s1$subject[i-1]) {
#  newSubj = T
#}
#if (newSubj) {
#  bonusTrial = sample(1:numTrials, 1)
#}
v1 = df.words$s1_value[df.words$subject == subj & df.words$word == df.s1$word[i]]
v2 = df.words$s1_value[df.words$subject == subj & df.words$word == df.s1$alt[i]]
choice = df.s1$choice[i]
#df.s1$correct_word[i] = ain(toupper(df.s1$resp[i]), df.s1$word[i], maxDist = 2) & ain(toupper(df.s1$resp3[i]), df.s1$alt[i], maxDist = 2)
#df.s1$correct_val[i] = df.s1$resp2[i] == df.s1$value[i] & df.s1$resp4[i] == df.s1$value2[i]
df.s1$correct_word[i] = df.s1$resp[i]
df.s1$correct_choice[i] = ifelse(length(v2) > 0, ifelse(v1 == v2, 1, ifelse(v1 > v2, choice == 0, choice == 1)), -1)
#df.s1$bonusTrial[i] = bonusTrial
#df.s1$bonusMoney[i] = ifelse(df.s1$choice[bonusTrial] == 0, df.s1$value[bonusTrial], df.s1$value2[bonusTrial])
#newSubj = F
#df.demo$s1_bonus[df.demo$subject == subj] = df.s1$bonusMoney[i]
}
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(pctCorrect_words = mean(correct_word, na.rm = T),
pctCorrect_choice = mean(correct_choice, na.rm = T), numTrials = n())
df.s1.last = df.s1 %>% filter(trial > 66) %>% group_by(subject) %>% summarize(pctCorrect_choice = mean(correct_choice, na.rm = T),
pctCorrect_words = mean(correct_word, na.rm = T))
# compute exclusion -------------------------------------------------------
include_rows = NULL
include_names = NULL
for (subj in 1:length(subjlist)) {
subj.name = subjlist[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s1.last.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.excl %>% filter(subject == subj.name)
df.demo.temp = df.demo %>% filter(subject == subj.name)
df.words.temp = df.words %>% filter(subject == subj.name)
exclude = df.demo.temp$write_down == 'Yes' || df.s2.subj.temp$comp_check_pass < 1 ||
df.s2.subj.temp$numNAs > minNAs || df.s2.subj.temp$numTrials != numQuestions ||
df.s1.subj.temp$numTrials != numTrials ||
df.s1.last.temp$pctCorrect_choice < .7 #|| sum(df.words.temp$in.cs) < 2 || #df.demo.temp$use_s1 == 'Yes'
if (exclude) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
# data manip --------------------------------------------------------------
## words
for (i in 1:nrow(df.words)) {
subj = df.words$subject[i]
s1_valuelist = (df.words %>% filter(subject == subj))$s1_value
s1_valuelist_rank = rank(s1_valuelist, ties.method = 'max')
df.words$high_s1value[i] = df.words$s1_value[i] > median(s1_valuelist)
df.words$rank_s1value[i] = s1_valuelist_rank[df.words$word_ind[i] + 1]
s2_valuelist = (df.words %>% filter(subject == subj))$s2_value
s2_valuelist_rank = rank(s2_valuelist, ties.method = 'max')
s2_valuelist_indiv = (df.words %>% filter(subject == subj & in.cs == 1))$s2_value
s2_valuelist_indiv_rank = rank(-s2_valuelist_indiv, ties.method = 'max')
df.words$high_s2value[i] = df.words$s2_value[i] > median(s2_valuelist)
df.words$rank_s2value[i] = s2_valuelist_rank[df.words$word_ind[i] + 1]
df.words$rank_s2value_indiv[i] = ifelse(df.words$in.cs[i], s2_valuelist_indiv_rank[df.words$s2_value[i] == s2_valuelist_indiv], NA)
df.words$rank_s2value_indiv_mean[i] = mean(s2_valuelist_indiv_rank)
}
df.words = df.words %>% mutate(chosen = ifelse(in.cs, 0, NA))
## s2
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
cind = df.s2$choice_real_ind[i]
creal = df.s2$choice_real[i]
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$s1_value[word_rows])
df.s2$high_s1value[i] = ifelse(is.na(cind), NA, df.words$high_s1value[word_rows])
df.s2$rank_s1value[i] = ifelse(is.na(cind), NA, df.words$rank_s1value[word_rows])
df.s2$s2_value[i] = ifelse(is.na(cind), NA, df.words$s2_value[word_rows])
df.s2$high_s2value[i] = ifelse(is.na(cind), NA, df.words$high_s2value[word_rows])
df.s2$rank_s2value[i] = ifelse(is.na(cind), NA, df.words$rank_s2value[word_rows])
df.s2$rank_s2value_indiv[i] = ifelse(is.na(cind), NA, df.words$rank_s2value_indiv[word_rows])
df.s2$rank_s2value_indiv_mean[i] = ifelse(is.na(cind), NA, df.words$rank_s2value_indiv_mean[word_rows])
s2_valuelist = (df.words %>% filter(subject == subj.name))$s2_value
df.s2$median_value[i] = median(s2_valuelist)
df.words$chosen[word_rows] = 1
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # just for modeling
bonus_value = ifelse(is.na(choice_real_ind), 0, s2_value))
df.s2.filt = df.s2 %>% filter(subject %in% include_names & question_order == 0)
df.words.filt = df.words %>% filter(subject %in% include_names)
df.demo.filt = df.demo %>% filter(subject %in% include_names)
## plots!
# effect of stage 1 value on...
df.graph.s1 = df.words.filt %>% group_by(cond, s1_value) %>%
summarize(in.cs = mean(in.cs), in.cs.se = sqrt(in.cs * (1-in.cs) / n()),
chosen = mean(chosen, na.rm = T), chosen.se = sqrt(chosen * (1-chosen) / n()))
# choice sets
ggplot(df.graph.s1, aes(x = s1_value, y = in.cs)) +
geom_point(size = 5) + geom_line() +
geom_errorbar(aes(ymin = in.cs - in.cs.se, ymax = in.cs+in.cs.se), width = .2) +
geom_smooth(method='lm')+
#xlab('Stage 1 value') + ylab('Prob. in choice set') +
scale_y_continuous(breaks = c(.3,.5), limits = c(.3,.5)) +
#scale_x_continuous(breaks = c(1,12))
facet_wrap(~cond)
gghistostats(df.s2.filt, rank_s2value, test.value = 6.5, centrality.para = 'mean', type = 'np')
m.s1 = glmer(in.cs~s1_value+s2_value+(s1_value+s2_value|subject), data = df.words.filt, family='binomial')
summary(m.s1)
# import data -------------------------------------------------------------
numWords = 12;
numTrials = 132;
minNAs = 1;
path = 'data/value/v7_conf/real2/'
pointsPerCent_s1 = 5;
pointsPerCent_s2 = 1;
pointsPerWord = 3; # for memory condition
allBonus = 25;
numRealQuestions = 1;
type = 0;
maxRepeats = 2;
numQuestions = 2;
# Load data
df.demo = read.csv(paste0(path, 'demo.csv'), stringsAsFactors = F) %>% arrange(subject) %>% mutate(total_time_real = total_time / 60000)
df.words.raw = read.csv(paste0(path, 'words.csv'), stringsAsFactors = F) %>% arrange(subject, word_ind)
df.s1.raw = read.csv(paste0(path, 's1.csv'), stringsAsFactors = F) %>% arrange(subject);
df.s2.raw = read.csv(paste0(path, 's2.csv'), stringsAsFactors = F) %>% arrange(subject, question_order)
subjlist = df.demo$subject
# words
df.words = df.words.raw %>% filter(subject %in% subjlist) %>%
mutate(repeated = word_ind == lead(word_ind)) %>%
filter(!repeated)
# s2
df.s2 = df.s2.raw %>% filter(subject %in% subjlist)
df.s2$choice = toupper(df.s2$choice)
df.s2$scratch = gsub("[.]", ",", toupper(as.character(df.s2$scratch)))
df.s2$all_values = as.character(df.s2$all_values)
df.s2$comp_check_pass = as.numeric(df.s2$comp_check_pass)
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = gsub("\n.*","",df.s2$choice[i])
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
if (is.na(cind)) {
# try scratch
c = gsub("\n.*","",df.s2$scratch[i])
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
}
df.s2$choice_real[i] = creal
df.s2$choice_real_ind[i] = cind
}
# df.s2.excl
df.s2.excl = df.s2 %>% filter(subject %in% subjlist) %>%
group_by(subject) %>%
summarize(comp_check_pass = mean(comp_check_pass[question_order == 0]),
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T),
numTrials = n(),
cond = cond[1])
# recall
recalled = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.s2.excl), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.s2.excl)) {
if (df.s2.excl$cond[i] == 'memory') {
subj.name = df.s2.excl$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
df.s2.temp.mem = df.s2.temp %>% filter(question == 'Memory')
words_temp = trimws(as.string.vector(df.s2.temp.mem$choice))
val_temp = as.numeric(trimws(as.string.vector(df.s2.temp.mem$scratch)))
val_temp[is.na(val_temp)] = -99
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
if (recalled[i,j]) {
true_val = df.words.temp$s1_value[df.words.temp$word_ind == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 1
}
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
}
for (i in 1:nrow(df.words)) {
subj = df.words$subject[i]
choice = (df.s2 %>% filter(subject == subj, question_order == 0))$choice_real
df.s2.temp = df.s2 %>% filter(subject == subj)
if (T) {
# which words were in cs
cs = (df.s2.temp %>% filter(question == 'choice-set'))$choice
cs = as.string.vector.noquotes(gsub('\"', '', cs))
for (j in 1:length(cs)) {
cs.split = strsplit(cs[j], ":")[[1]]
word = cs.split[1]
val = cs.split[2]
if (length(choice) > 0) {
df.words$in.cs[df.words$word == word & df.words$subject == subj] = ifelse(val == "1" | word == choice, T, ifelse(val == "0", F, NA))
} else {
df.words$in.cs[df.words$word == word & df.words$subject == subj] = NA
}
}
} else {
df.words$in.cs[i] = df.words$recall.ever[i]
}
}
# s1
df.s1 = df.s1.raw %>% filter(subject %in% subjlist) %>%
mutate(word_chosen = ifelse(choice, alt, word))
#newSubj = T
for (i in 1:nrow(df.s1)) {
subj = df.s1$subject[i]
#if (i > 1 && subj != df.s1$subject[i-1]) {
#  newSubj = T
#}
#if (newSubj) {
#  bonusTrial = sample(1:numTrials, 1)
#}
v1 = df.words$s1_value[df.words$subject == subj & df.words$word == df.s1$word[i]]
v2 = df.words$s1_value[df.words$subject == subj & df.words$word == df.s1$alt[i]]
choice = df.s1$choice[i]
#df.s1$correct_word[i] = ain(toupper(df.s1$resp[i]), df.s1$word[i], maxDist = 2) & ain(toupper(df.s1$resp3[i]), df.s1$alt[i], maxDist = 2)
#df.s1$correct_val[i] = df.s1$resp2[i] == df.s1$value[i] & df.s1$resp4[i] == df.s1$value2[i]
df.s1$correct_word[i] = df.s1$resp[i]
df.s1$correct_choice[i] = ifelse(length(v2) > 0, ifelse(v1 == v2, 1, ifelse(v1 > v2, choice == 0, choice == 1)), -1)
#df.s1$bonusTrial[i] = bonusTrial
#df.s1$bonusMoney[i] = ifelse(df.s1$choice[bonusTrial] == 0, df.s1$value[bonusTrial], df.s1$value2[bonusTrial])
#newSubj = F
#df.demo$s1_bonus[df.demo$subject == subj] = df.s1$bonusMoney[i]
}
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(pctCorrect_words = mean(correct_word, na.rm = T),
pctCorrect_choice = mean(correct_choice, na.rm = T), numTrials = n())
df.s1.last = df.s1 %>% filter(trial > 66) %>% group_by(subject) %>% summarize(pctCorrect_choice = mean(correct_choice, na.rm = T),
pctCorrect_words = mean(correct_word, na.rm = T))
# compute exclusion -------------------------------------------------------
include_rows = NULL
include_names = NULL
for (subj in 1:length(subjlist)) {
subj.name = subjlist[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s1.last.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.excl %>% filter(subject == subj.name)
df.demo.temp = df.demo %>% filter(subject == subj.name)
df.words.temp = df.words %>% filter(subject == subj.name)
exclude = df.demo.temp$write_down == 'Yes' || df.s2.subj.temp$comp_check_pass < 1 ||
df.s2.subj.temp$numNAs > minNAs || df.s2.subj.temp$numTrials != numQuestions ||
df.s1.subj.temp$numTrials != numTrials ||
df.s1.last.temp$pctCorrect_choice < .7 #|| sum(df.words.temp$in.cs) < 2 || #df.demo.temp$use_s1 == 'Yes'
if (exclude) {
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
# data manip --------------------------------------------------------------
## words
for (i in 1:nrow(df.words)) {
subj = df.words$subject[i]
s1_valuelist = (df.words %>% filter(subject == subj))$s1_value
s1_valuelist_rank = rank(s1_valuelist, ties.method = 'max')
df.words$high_s1value[i] = df.words$s1_value[i] > median(s1_valuelist)
df.words$rank_s1value[i] = s1_valuelist_rank[df.words$word_ind[i] + 1]
s2_valuelist = (df.words %>% filter(subject == subj))$s2_value
s2_valuelist_rank = rank(s2_valuelist, ties.method = 'max')
s2_valuelist_indiv = (df.words %>% filter(subject == subj & in.cs == 1))$s2_value
s2_valuelist_indiv_rank = rank(-s2_valuelist_indiv, ties.method = 'max')
df.words$high_s2value[i] = df.words$s2_value[i] > median(s2_valuelist)
df.words$rank_s2value[i] = s2_valuelist_rank[df.words$word_ind[i] + 1]
df.words$rank_s2value_indiv[i] = ifelse(df.words$in.cs[i], s2_valuelist_indiv_rank[df.words$s2_value[i] == s2_valuelist_indiv], NA)
df.words$rank_s2value_indiv_mean[i] = mean(s2_valuelist_indiv_rank)
}
df.words = df.words %>% mutate(chosen = ifelse(in.cs, 0, NA))
## s2
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
cind = df.s2$choice_real_ind[i]
creal = df.s2$choice_real[i]
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$s1_value[word_rows])
df.s2$high_s1value[i] = ifelse(is.na(cind), NA, df.words$high_s1value[word_rows])
df.s2$rank_s1value[i] = ifelse(is.na(cind), NA, df.words$rank_s1value[word_rows])
df.s2$s2_value[i] = ifelse(is.na(cind), NA, df.words$s2_value[word_rows])
df.s2$high_s2value[i] = ifelse(is.na(cind), NA, df.words$high_s2value[word_rows])
df.s2$rank_s2value[i] = ifelse(is.na(cind), NA, df.words$rank_s2value[word_rows])
df.s2$rank_s2value_indiv[i] = ifelse(is.na(cind), NA, df.words$rank_s2value_indiv[word_rows])
df.s2$rank_s2value_indiv_mean[i] = ifelse(is.na(cind), NA, df.words$rank_s2value_indiv_mean[word_rows])
s2_valuelist = (df.words %>% filter(subject == subj.name))$s2_value
df.s2$median_value[i] = median(s2_valuelist)
df.words$chosen[word_rows] = 1
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # just for modeling
bonus_value = ifelse(is.na(choice_real_ind), 0, s2_value))
df.s2.filt = df.s2 %>% filter(subject %in% include_names & question_order == 0)
df.words.filt = df.words %>% filter(subject %in% include_names)
df.demo.filt = df.demo %>% filter(subject %in% include_names)
test = df.s2 %>% group_by(subject) %>% summarize(num0 = sum(question_order == 0), num1 = sum(question_order == 1))
df.s2.subj = df.s2 %>% filter(question_order == 0) %>%
mutate(s2_bonus = ifelse(is.na(s2_value), 0, s2_value),
mem_bonus = 0)
df.demo = df.demo %>% filter(!(subject %in% c('A1A1FB3IFEHJ5W', 'A1ZIOQV6C11P4M'))) %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus / pointsPerCent_s1 + s2_bonus / pointsPerCent_s2  + mem_bonus) / 100, 2))
write.table(df.demo %>% dplyr::select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
View(df.demo)
## bonuses
test = df.s2 %>% group_by(subject) %>% summarize(num0 = sum(question_order == 0), num1 = sum(question_order == 1))
df.s2.subj = df.s2 %>% filter(question_order == 0) %>%
mutate(s2_bonus = ifelse(is.na(s2_value), 0, s2_value),
mem_bonus = 0)
df.demo = df.demo %>% filter(!(subject %in% c('A1A1FB3IFEHJ5W', 'A1ZIOQV6C11P4M')) & id >= 6589) %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus / pointsPerCent_s1 + s2_bonus / pointsPerCent_s2  + mem_bonus) / 100, 2))
write.table(df.demo %>% dplyr::select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
df.s2.subj = df.s2 %>% filter(question_order == 0 & id >= 6589) %>%
mutate(s2_bonus = ifelse(is.na(s2_value), 0, s2_value),
mem_bonus = 0)
df.demo = df.demo %>% filter(!(subject %in% c('A1A1FB3IFEHJ5W', 'A1ZIOQV6C11P4M')) & id >= 6589) %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus / pointsPerCent_s1 + s2_bonus / pointsPerCent_s2  + mem_bonus) / 100, 2))
View(df.s2)
## bonuses
test = df.s2 %>% group_by(subject) %>% summarize(num0 = sum(question_order == 0), num1 = sum(question_order == 1))
df.s2.subj = df.s2 %>% filter(question_order == 0) %>%
mutate(s2_bonus = ifelse(is.na(s2_value), 0, s2_value),
mem_bonus = 0)
df.demo = df.demo %>% filter(!(subject %in% c('A1A1FB3IFEHJ5W', 'A1ZIOQV6C11P4M'))) %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus / pointsPerCent_s1 + s2_bonus / pointsPerCent_s2  + mem_bonus) / 100, 2))
write.table(df.demo %>% filter(id >= 6589) & dplyr::select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
## bonuses
test = df.s2 %>% group_by(subject) %>% summarize(num0 = sum(question_order == 0), num1 = sum(question_order == 1))
df.s2.subj = df.s2 %>% filter(question_order == 0) %>%
mutate(s2_bonus = ifelse(is.na(s2_value), 0, s2_value),
mem_bonus = 0)
df.demo = df.demo %>% filter(!(subject %in% c('A1A1FB3IFEHJ5W', 'A1ZIOQV6C11P4M'))) %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus / pointsPerCent_s1 + s2_bonus / pointsPerCent_s2  + mem_bonus) / 100, 2))
write.table(df.demo %>% filter(id >= 6589) %>% dplyr::select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
## bonuses
test = df.s2 %>% group_by(subject) %>% summarize(num0 = sum(question_order == 0), num1 = sum(question_order == 1))
df.s2.subj = df.s2 %>% filter(question_order == 0) %>%
mutate(s2_bonus = ifelse(is.na(s2_value), 0, s2_value),
mem_bonus = 0)
df.demo = df.demo %>% filter(!(subject %in% c('A1A1FB3IFEHJ5W', 'A1ZIOQV6C11P4M'))) %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus / pointsPerCent_s1 + s2_bonus / pointsPerCent_s2  + mem_bonus) / 100, 2))
write.table(df.demo %>% filter(id >= 6589) %>% dplyr::select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
