recalled_ever = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.mem), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.mem)) {
subj.name = df.mem$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
words_temp = trimws(as.string.vector(df.mem$choice[i]))
val_temp = as.numeric(trimws(as.string.vector(df.mem$scratch[i])))
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
if (recalled[i,j]) {
true_val = df.words.temp$value[df.words.temp$word_ind  == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 2
}
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
## Compute exclusion
# Exclude if any of these: cor in s1 < .75, comp_check_pass < .5, pctCorrect_words < .75, pctCorrect_pts < .75, numNAs > 3, numRepeats > 2, numRecalled < 5
include_rows = NULL
include_names = NULL
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
if (df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctCorrect_val < .75 || df.s2.subj.temp$comp_check_pass < .5 || df.s1.subj.temp$pctCorrectChoice < .6 ||
df.s2.subj.temp$numRepeats > 2 || sum(recalled[subj,]) < 5 || df.s1.subj.temp$numTrials != 91 || df.s2.subj.temp$numNAs > 4) { # either 2 or 4
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
df.logit = df.logit %>% mutate(MFcent = MFhigh - mean(MFhigh), MBcent = MBval - mean(MBval), Int = MFcent * MBcent,
nChosen_cent = nChosen - mean(nChosen))
numRealQuestions = numQuestions - 1
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 7
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFhigh - mean(MFhigh), MBcent = MBval - mean(MBval), Int = MFcent * MBcent,
nChosen_cent = nChosen - mean(nChosen))
df.sum = df.logit %>% group_by(nChosen,MBhigh) %>% summarize(Choice.mean = mean(Choice)) #%>% mutate(Choice.mean = Choice.mean * ifelse(MFval %in% c(0,10), 2/3, 1))
ggplot(data = df.sum, aes(x = MBhigh, y = Choice.mean, group = nChosen, colour = nChosen)) +
geom_point(aes(size = 2)) + geom_line()
View(df.words)
median(df.words$numChosen)
df.s1.subjword = df.s1 %>% group_by(subject, word) %>% summarize(numChosen = n())
for (i in 1:nrow(df.words)) {
subjword_rows = df.s1.subjword$subject == df.words$subject[i] & df.s1.subjword$word == df.words$word[i]
df.words$numChosen[i] = ifelse(any(subjword_rows), df.s1.subjword$numChosen[subjword_rows], NA)
df.words$numChosen_high[i] = df.words$numChosen[i] > 6
}
df.cors = df.words %>% group_by(subject) %>% summarize(cors = cor(numChosen, value), numhigh = sum(numChosen[high_val]) / 91)
numRealQuestions = numQuestions - 1
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 7
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFhigh - mean(MFhigh), MBcent = MBval - mean(MBval), Int = MFcent * MBcent,
nChosen_cent = nChosen - mean(nChosen))
## Graph
df.sum = df.logit %>% group_by(nChosen,MBhigh) %>% summarize(Choice.mean = mean(Choice)) #%>% mutate(Choice.mean = Choice.mean * ifelse(MFval %in% c(0,10), 2/3, 1))
ggplot(data = df.sum, aes(x = MBhigh, y = Choice.mean, group = nChosen, colour = nChosen)) +
geom_point(aes(size = 2)) + geom_line()
View(df.cors)
View(df.cors)
View(df.s1.subj)
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(pctCorrect_words = mean(correct_word, na.rm = T), pctCorrect_val = mean(correct_val, na.rm = T), numTrials = n(),
pctCorrectChoice = mean(chose_better), pctHighVal = mean(high_val))
View(df.s1.subj)
View(df.words)
c(1,2,3)
c(2,3,16)
cor(df.s1$word_value, df.s1$word_chosen)
cor(df.s1$word_value, as.numeric(df.s1$word_chosen))
cor(df.s1$word_value, as.numeric(df.s1$word_chosen), na.rm = T)
cor(df.s1$word_value, as.numeric(df.s1$word_chosen), rm.na = T)
cor.test(df.s1$word_value, as.numeric(df.s1$word_chosen))
View(df.s1)
cor(df.s1$word_value, df.s1$choice)
View(df.words)
cor(df.words$value, df.words$numChosen)
View(df.s1)
rm(list=ls())
require(ggplot2)
require(dplyr)
require(lme4)
require(lmerTest)
require(lattice)
se <- function(x) {sd(x) / sqrt(length(x))};
dodge <- position_dodge(width=0.9)
setwd('/Users/adam/Me/Psychology/Projects/causality/git/data')
path = 'thomas_fire/v3/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(focal_high, c(0,1), c('Key rare', 'Key common')),
alt_fac = factor(alt_high, c(0,1), c('Lock rare', 'Lock common')),
alt2_fac = factor(alt2_high, c(0,1), c('Friend rarely remembers to bring food', 'Friend usually remembers to bring food')))
demo = read.csv(paste0(path, 'demo.csv')) %>% arrange(subject) %>% mutate(total_time_actual = total_time / 60000)
naive = (demo %>% filter(experienced != 'Yes'))$subject
ccpass = (demo %>% filter(cc1 == 'Yes' & cc2 == 'No'))$subject
for (i in 1:nrow(demo)) {
subj = demo$subject[i]
j = which(as.character(data$subject) == as.character(subj))
demo$cc3pass[i] = ifelse(data$alt2_high[j], ifelse(demo$cc3[i] == 'Yes', T, F), ifelse(demo$cc3[i] == 'Yes', F, T))
}
cc3pass = (demo %>% filter(cc3pass))$subject
df.graph = data %>% filter(subject %in% ccpass & subject %in% cc3pass) %>%
group_by(focal_fac, alt_fac, alt2_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph, aes(x = focal_fac, y = rating.mean, colour = alt_fac, group = alt_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .1) +
facet_wrap(~ alt2_fac)
sum(ccpass)
length(ccpass)
length(cc3pass)
df.graph = data %>% filter(subject %in% ccpass & subject %in% cc3pass & subject %in% naive) %>%
group_by(focal_fac, alt_fac, alt2_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph, aes(x = focal_fac, y = rating.mean, colour = alt_fac, group = alt_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .1) +
facet_wrap(~ alt2_fac)
path = 'thomas_fire/v4/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(focal_high, c(0,1), c('Key rare', 'Key common')),
alt_fac = factor(alt_high, c(0,1), c('Lock rare', 'Lock common')),
alt2_fac = factor(alt2_high, c(0,1), c('Friend rarely remembers to bring food', 'Friend usually remembers to bring food')))
demo = read.csv(paste0(path, 'demo.csv')) %>% arrange(subject) %>% mutate(total_time_actual = total_time / 60000)
naive = (demo %>% filter(experienced != 'Yes'))$subject
ccpass = (demo %>% filter(cc1 == 'Yes' & cc2 == 'No'))$subject
for (i in 1:nrow(demo)) {
subj = demo$subject[i]
j = which(as.character(data$subject) == as.character(subj))
demo$cc3pass[i] = ifelse(data$alt2_high[j], ifelse(demo$cc3[i] == 'Yes', T, F), ifelse(demo$cc3[i] == 'Yes', F, T))
}
cc3pass = (demo %>% filter(cc3pass))$subject
df.graph = data %>% filter(subject %in% ccpass & subject %in% cc3pass & subject %in% naive) %>%
group_by(focal_fac, alt_fac, alt2_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph, aes(x = focal_fac, y = rating.mean, colour = alt_fac, group = alt_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .1) +
facet_wrap(~ alt2_fac)
training = read.csv(paste0(path, 'training.csv')) %>% arrange(subject) %>% group_by(subject) %>%
summarize(pctCorrect = mean(correct))
View(training)
training = read.csv(paste0(path, 'training.csv')) %>% arrange(subject) %>% group_by(subject) %>%
summarize(pctCorrect = mean(correct))
trainingpass = (training %>% filter(pctCorrect >= .8))$subject
df.graph = data %>% filter(subject %in% ccpass & subject %in% cc3pass & subject %in% trainingpass) %>%
group_by(focal_fac, alt_fac, alt2_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph, aes(x = focal_fac, y = rating.mean, colour = alt_fac, group = alt_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .1) +
facet_wrap(~ alt2_fac)
rm(list=ls())
require(ggplot2)
require(dplyr)
require(lme4)
require(lmerTest)
require(lattice)
se <- function(x) {sd(x) / sqrt(length(x))};
dodge <- position_dodge(width=0.9)
setwd('/Users/adam/Me/Psychology/Projects/causality/git/data')
path = 'thomas_all_3/v1/'
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high > 5, 'high', 'low'), c('low', 'high')),
alton_high = ifelse(greenSecond, alt_high, alt2_high), altoff_high = ifelse(greenSecond, alt2_high, alt_high),
alton_fac = factor(ifelse(alton_high > 5, 'high', 'low'), c('low', 'high')),
altoff_fac = factor(ifelse(altoff_high > 5, 'high', 'low'), c('low', 'high')))
df.graph = data %>% group_by(focal_high, alton_high, altoff_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph2, aes(x = focal_fac, y = rating.mean, colour = alton_fac, group = alton_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .1) +
facet_wrap(~ altoff_fac)
df.graph2 = data %>% group_by(focal_fac, alton_fac, altoff_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph2, aes(x = focal_fac, y = rating.mean, colour = alton_fac, group = alton_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .1) +
facet_wrap(~ altoff_fac)
data = read.csv(paste0(path, 'data.csv')) %>% arrange(subject) %>%
mutate(focal_fac = factor(ifelse(focal_high >= 5, 'high', 'low'), c('low', 'high')),
alton_high = ifelse(greenSecond, alt_high, alt2_high), altoff_high = ifelse(greenSecond, alt2_high, alt_high),
alton_fac = factor(ifelse(alton_high >= 5, 'high', 'low'), c('low', 'high')),
altoff_fac = factor(ifelse(altoff_high >= 5, 'high', 'low'), c('low', 'high')))
df.graph = data %>% group_by(focal_high, alton_high, altoff_high) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
wireframe(rating.mean ~ alton_high * focal_high | altoff_high, data = df.graph, colorkey = TRUE, drape = TRUE,  screen=list(z=130, x=-60, y=0))
model = lmer(rating ~ focal_high * alt_high + (1 + focal_high + alt_high | subject), data = data)
summary(model)
df.graph2 = data %>% group_by(focal_fac, alton_fac, altoff_fac) %>% summarise(rating.mean = mean(rating), rating.se = se(rating))
ggplot(data = df.graph2, aes(x = focal_fac, y = rating.mean, colour = alton_fac, group = alton_fac)) +
geom_line() +
geom_errorbar(aes(ymax = rating.mean + rating.se, ymin = rating.mean - rating.se), width = .1) +
facet_wrap(~ altoff_fac)
rm(list=ls())
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(mlogit)
require(stringdist)
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=18, face = "bold"), axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20), plot.title = element_text(size = 26, face = "bold", vjust = 1))
setwd("~/Me/Psychology/Projects/choicesets/with_sam")
## Setup
getIndex = function(x, list) {
y = numeric(length(x))
for (j in 1:length(x)) {
if (any(list %in% x[j])) {
y[j] = which(list %in% x[j])
} else {
y[j] = NA
}
}
return(y)
}
as.string.vector = function(x) {
temp = strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]
return(substr(temp, 2, nchar(temp) - 1))
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]))
}
# Do logit
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFcent + MBcent + Int | -1, df.m, panel = T,
rpar = c(MFcent = "n", MBcent = "n", Int = 'n'), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
se = function(x) {return(sd(x) / sqrt(length(x)))}
dodge <- position_dodge(width=0.9)
numWords = 14;
numQuestions = 9; # including memory
pointsPerCent = 10;
pointsPerWord = 10; # for memory condition
path = 'data/cs_wg_v8/pilot1/'
# Load data
df.demo = read.csv(paste0(path, 'demo.csv'), stringsAsFactors = F) %>% arrange(subject) %>% mutate(total_time_real = total_time / 60000)
df.words.raw = read.csv(paste0(path, 'words.csv'), stringsAsFactors = F) %>% arrange(subject, word_ind)
df.s1.raw = read.csv(paste0(path, 's1.csv'), stringsAsFactors = F) %>% arrange(subject)
df.s2.raw = read.csv(paste0(path, 's2.csv'), stringsAsFactors = F) %>% arrange(subject, question_order)
subjlist = df.demo$subject
## words
df.words = df.words.raw %>% mutate(doubled = ifelse(is.na(lead(word)), FALSE, word == lead(word) & subject == lead(subject))) %>%
filter(doubled == FALSE & subject %in% subjlist) %>%
mutate(high_val = value > 5, numChosen = 0)
## s1
df.s1 = df.s1.raw %>% filter(subject %in% subjlist) %>%
mutate(correct_word = ain(toupper(resp), word, maxDist = 2), correct_val = resp2 == value, word_chosen = ifelse(choice, alt, word),
high_val = value > 5)
for (i in 1:nrow(df.s1)) {
subj = df.s1$subject[i]
word = df.s1$word[i]
alt = df.s1$alt[i]
choice = df.s1$choice[i]
df.s1$word_value[i] = df.words$value[df.words$subject == subj & df.words$word == word]
df.s1$alt_value[i] = df.words$value[df.words$subject == subj & df.words$word == alt]
df.s1$word_better[i] = df.s1$word_value[i] > df.s1$alt_value[i]
df.s1$chose_better[i] = ifelse(df.s1$word_better[i], !choice, choice)
}
# get numChosen & cors
df.s1.subjword = df.s1 %>% group_by(subject, word) %>% summarize(numChosen = n())
for (i in 1:nrow(df.words)) {
subjword_rows = df.s1.subjword$subject == df.words$subject[i] & df.s1.subjword$word == df.words$word[i]
df.words$numChosen[i] = ifelse(any(subjword_rows), df.s1.subjword$numChosen[subjword_rows], NA)
df.words$numChosen_high[i] = df.words$numChosen[i] > 6
}
# get pctCorrects
df.s1.subj = df.s1 %>% group_by(subject) %>%
summarize(pctCorrect_words = mean(correct_word, na.rm = T), pctCorrect_val = mean(correct_val, na.rm = T), numTrials = n(),
pctCorrectChoice = mean(chose_better), pctHighVal = mean(high_val))
df.s1.trial = df.s1 %>% group_by(trial) %>% summarize(pctCorrectChoice = mean(chose_better))
plot(df.s1.trial$pctCorrectChoice)
View(df.s1.subjword)
View(df.words)
df.words.subj = df.words %>% group_by(subject) %>% summarize(cor = cor(value, numChosen))
View(df.words.subj)
View(df.s1.subj)
View(df.s1)
View(df.words)
df.s1.subjword = df.s1 %>% group_by(subject, word_chosen) %>% summarize(numChosen = n())
for (i in 1:nrow(df.words)) {
subjword_rows = df.s1.subjword$subject == df.words$subject[i] & df.s1.subjword$word == df.words$word[i]
df.words$numChosen[i] = ifelse(any(subjword_rows), df.s1.subjword$numChosen[subjword_rows], NA)
df.words$numChosen_high[i] = df.words$numChosen[i] > 6
}
df.words.subj = df.words %>% group_by(subject) %>% summarize(cor = cor(value, numChosen))
View(df.words.subj)
View(df.s1.subjword)
i = 1
subjword_rows = df.s1.subjword$subject == df.words$subject[i] & df.s1.subjword$word == df.words$word[i]
df.s1.subjword = df.s1 %>% group_by(subject, word_chosen) %>% summarize(numChosen = n())
for (i in 1:nrow(df.words)) {
subjword_rows = df.s1.subjword$subject == df.words$subject[i] & df.s1.subjword$word_chosen == df.words$word[i]
df.words$numChosen[i] = ifelse(any(subjword_rows), df.s1.subjword$numChosen[subjword_rows], NA)
df.words$numChosen_high[i] = df.words$numChosen[i] > 6
}
df.words.subj = df.words %>% group_by(subject) %>% summarize(cor = cor(value, numChosen))
View(df.words.subj)
View(df.demo)
median(df.demo$total_time_real)
nrecall_bonus = rowSums(recalled & recalled_val)
df.s2.subj = df.s2.subj %>% mutate(mem_bonus = nrecall_bonus[df.mem$subject == subject] * pointsPerWord)
df.demo = df.demo %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus + s2_bonus + mem_bonus) / (pointsPerCent * 100), 2))
write.table(df.demo %>% filter(id >= 150) %>% select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
df.s2 = df.s2.raw %>% filter(subject %in% subjlist)
# Mutate df.s2
df.s2$choice = toupper(df.s2$choice)
df.s2$scratch = gsub("[.]", ",", toupper(as.character(df.s2$scratch)))
df.s2$all_values = as.character(df.s2$all_values)
df.s2$rank_value = NULL
df.s2$num_ties = NULL
for (i in 1:nrow(df.s2)) {
subj.name = df.s2$subject[i]
wordlist = (df.words %>% filter(subject == subj.name))$word
c = df.s2$choice[i]
creal = wordlist[amatch(c, wordlist, maxDist = 2)]
cind = getIndex(creal, wordlist)
all_vals = as.numeric.vector(df.s2$all_values[i])
#all_vals = rewards_te[qvec[df.s2$question_ind[i] + 1], ] * mult[df.s2$question_ind[i] + 1]
#df.s2$all_values[i] = paste0('[', toString(all_vals), ']')
all_vals_rank = rank(all_vals, ties.method = 'max')
s2_val = ifelse(is.na(cind), NA, all_vals[cind])
word_rows = subj.name == df.words$subject & creal == df.words$word
df.s2$choice_real[i] = creal
df.s2$choice_real_ind[i] = cind
df.s2$s2_value[i] = s2_val
df.s2$rank_value[i] = ifelse(is.na(cind), NA, all_vals_rank[cind])
df.s2$s1_value[i] = ifelse(is.na(cind), NA, df.words$value[word_rows])
df.s2$s1_exposures[i] = ifelse(is.na(cind), NA, df.words$exposures[word_rows])
df.s2$s1_chosen[i] = ifelse(is.na(cind), NA, df.words$numChosen[word_rows])
}
df.s2 = df.s2 %>% mutate(s2_subj_ind = as.numeric(as.factor(subject)), # don't use that ind for anything serious
doubled = ifelse(is.na(choice_real_ind), NA, ifelse(is.na(lead(choice_real_ind)), F, choice_real_ind == lead(choice_real_ind)) |
ifelse(is.na(lag(choice_real_ind)), F, choice_real_ind == lag(choice_real_ind))),
bonus_value = ifelse(is.na(choice_real_ind), 0, ifelse(doubled, 0, s2_value)),
high_val = s1_value > 5)
df.mem = df.s2 %>% filter(question == 'Memory')
df.s2.subj = df.s2 %>% filter(subject %in% df.demo$subject) %>%
group_by(subject) %>%
summarize(s2_bonus = sum(bonus_value), rt = mean(rt) / 1000,
comp_check_pass = mean(comp_check_pass),
comp_check_rt = mean(comp_check_rt) / 1000,
numNAs = sum(is.na(choice_real)),
numRepeats = sum(choice_real == lag(choice_real), na.rm = T))
## Compute recalled
recalled = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_ever = matrix(F, nrow = nrow(df.mem), ncol = numWords)
recalled_val = matrix(F, nrow = nrow(df.mem), ncol = numWords)
df.words$recall = NULL
df.words$recall.ever = NULL
df.words$order = NULL
for (i in 1:nrow(df.mem)) {
subj.name = df.mem$subject[i]
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name)
words_temp = trimws(as.string.vector(df.mem$choice[i]))
val_temp = as.numeric(trimws(as.string.vector(df.mem$scratch[i])))
wordlist = df.words.temp$word
if (length(wordlist) == numWords) {
for (j in 1:numWords) {
which_word = amatch(wordlist[j], words_temp, maxDist = 2, nomatch = 0)
recalled[i,j] = which_word > 0
if (recalled[i,j]) {
true_val = df.words.temp$value[df.words.temp$word_ind  == (j - 1)]
recalled_val[i,j] = abs(val_temp[which_word] - true_val) <= 2
}
df.words$recall[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled[i,j]
recalled_ever[i,j] = recalled[i,j] | any(na.omit(df.s2.temp$choice_real_ind) == j)
df.words$recall.ever[df.words$subject == subj.name & df.words$word == wordlist[j]] = recalled_ever[i,j]
df.words$order[df.words$subject == subj.name & df.words$word == wordlist[j]] = which_word
}
}
}
## Compute exclusion
# Exclude if any of these: cor in s1 < .75, comp_check_pass < .5, pctCorrect_words < .75, pctCorrect_pts < .75, numNAs > 3, numRepeats > 2, numRecalled < 5
include_rows = NULL
include_names = NULL
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
df.s1.subj.temp = df.s1.subj %>% filter(subject == subj.name)
df.s2.subj.temp = df.s2.subj %>% filter(subject == subj.name)
if (df.s1.subj.temp$pctCorrect_words < .75 || df.s1.subj.temp$pctCorrect_val < .75 || df.s2.subj.temp$comp_check_pass < .5 || df.s1.subj.temp$pctCorrectChoice < .6 ||
df.s2.subj.temp$numRepeats > 2 || sum(recalled[subj,]) < 5 || df.s1.subj.temp$numTrials != 91 || df.s2.subj.temp$numNAs > 4) { # either 2 or 4
include_rows[subj] = FALSE
} else {
include_rows[subj] = TRUE
include_names = c(include_names, subj.name)
}
}
nrecall_bonus = rowSums(recalled & recalled_val)
df.s2.subj = df.s2.subj %>% mutate(mem_bonus = nrecall_bonus[df.mem$subject == subject] * pointsPerWord)
df.demo = df.demo %>% mutate(s2_bonus = I(df.s2.subj$s2_bonus), mem_bonus = I(df.s2.subj$mem_bonus),
bonus = round((s1_bonus + s2_bonus + mem_bonus) / (pointsPerCent * 100), 2))
write.table(df.demo %>% filter(id >= 150) %>% select(WorkerID = subject, Bonus = bonus),
paste0(path, 'Bonuses.csv'), row.names = FALSE, col.names = FALSE, sep = ",")
