N <- 361 # sample size
J <- 7 # number of predictors
ss.reg <- 59.69 # sum of squares of regression model
ss.res <- 344.25 # sum of squares of residuals
ms.reg <- ss.reg / J # mean-square regression
ms.res <- ss.res / (N - J - 1) # mean-square residuals
## 3a.
# What % of the variation in opposition to affirmative action can be explained
# by the other variables?
# The % of variance explained by all of them is R-squared, which is
# SS-reg / (SS-reg + SS-res), or...
rsq <- ss.reg / (ss.reg + ss.res) # .15
# The % of variance that can be explained by each predictor (NOT controlling
# for other variables) is the square of the zero-order correlations, or...
c(.235, .268, -.041, .091, .138, .077, .173) ^ 2
# in the order on the homework:
# .055 .072 .0017 .0083 .019 .0059 .030
# The % of variance that can be explained by each predictor (controlling for the
# effects of the other predictors on this predictor) is the square of the semi-partial correlation
# between opposition to affirmative action and the predictor (available in the output), or..
c(.179, .178, -.029, .121, .0884, -.0347, .105) ^ 2
# in the order on the homework:
# .032 .032 .00084 .015 .0078 .0012 .011
f.stat <- ms.reg / ms.res
# and get the p value by using the F distribution function...
pf(f.stat, J, N - J - 1, lower.tail = F)
rsq.adj <- 1 - (1 - rsq) * (N - 1) / (N - J - 1) # .13
var.res <- ss.res / (N - J - 1) # .98
.0884 ^ 2 # .0078
b.educ <- .143 * 1.059 / 1.618
# then, calculate a t statistic by t(N - J - 1) = b / std-error(b), pulling std-error(b) from the
# output, or...
t.stat.educ <- b.educ / .038
# finally, get the (2-tailed) p value by looking up this value in the t distribution
2 * pt(t.stat.educ, N - J - 1, lower.tail = FALSE) # .014
# p < .05; opposition to affirmative action can be predicted by education at an above-chance level
## 3g.
# Same explanation as above.
b.sdo <- .115 * 1.059 / .114
# As it's not in the output, this time we need to calculate the standard error of the unstandarized
# coefficient by:
# std-error-b <- sqrt(std-error-estimate ^ 2 / (ss-SDO * (1 - coef-of-multicollinearity)))
se.estimate.sdo <- sqrt(ss.res / N) # .98
se.estimate.sdo <- sqrt(ss.res / N) # .98
# to get the ss-SDO, we square the standard deviation of SDO (to get variance)
# and then multiply by N. (We're assuming that SPSS isn't reporting the
# unbiased estimate of population standard deviation.)
ss.sdo <- (.114 ^ 2) * N
# note that (1 - coef-of-multicollinearity(sdo)) = tolerance(sdo),
# which is given
tol.sdo <- .843
# so:
se.b.sdo <- sqrt((se.estimate.sdo ^ 2) / (ss.sdo * tol.sdo)) # .49
t.stat.sdo <- b.sdo / se.b.sdo # 2.18
2 * pt(t.stat.sdo, N - J - 1, lower.tail = FALSE) # .030
# p < .05; opposition to affirmative action can be predicted by SDO at an above-chance level
## 3h.
cor.aa.ed <- .091
cor.aa.sdo <- .173
cor.ed.sdo <- -.228
# This semi-partial correlation is a measure of the relationship between affirmative action
# opposition and education, controlling for the effect of SDO on education. It is calculated by:
spcor.aa.ed <- (cor.aa.ed - cor.aa.sdo * cor.ed.sdo) / sqrt(1 - cor.ed.sdo ^ 2) # .13
# Power analysis
# (This is with no interaction - within-subjects one-way anova)
mean_yes = .5;
mean_no = .4;
sd = .35;
cor = .3;
cov = cor * (sd ^ 2);
#mean2a = .5;
#mean2b = .5;
n = 140
nTests = 1000
success = vector(mode = "logical", length = nTests)
for (i in 1:nTests) {
subjects <- mvrnorm(n, c(mean_yes, mean_no, mean_no),
matrix(c(sd ^ 2, cov, cov,
cov, sd ^ 2, cov,
cov, cov, sd ^ 2), nrow = 3))
my.df <- data.frame(subject = as.factor(rep(1:n, 3)),
condition = as.factor(rep(1:3, each = n)),
scr = as.vector(subjects))
fit <- ezANOVA(my.df, dv = scr, wid = subject, within = condition)
if (fit$ANOVA[1,5] < .05) {
success[i] = TRUE
}
}
mean(success)
install.packages("BiasedUrn")
# preliminaries -----------------------------------------------------------
require(dplyr)
require(ggplot2)
require(lme4)
require(lmerTest)
require(mlogit)
require(stringdist)
require(ez)
require(lattice)
theme_update(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_rect(colour = "black"),
axis.text=element_text(size=20, colour = "black"), axis.title=element_text(size=18, face = "bold"), axis.title.x = element_text(vjust = 0),
legend.title = element_text(size = 24, face = "bold"), legend.text = element_text(size = 20), plot.title = element_text(size = 26, face = "bold", vjust = 1))
setwd("~/Me/Psychology/Projects/choicesets/with_sam")
getIndex = function(x, list) {
y = numeric(length(x))
for (j in 1:length(x)) {
if (any(list %in% x[j])) {
y[j] = which(list %in% x[j])
} else {
y[j] = NA
}
}
return(y)
}
as.string.vector = function(x) {
temp = strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]
return(substr(temp, 2, nchar(temp) - 1))
}
as.numeric.vector = function(x) {
return(as.numeric(strsplit(substr(x,2,nchar(x)-1), split=",")[[1]]))
}
se = function(x) {return(sd(x) / sqrt(length(x)))}
dodge <- position_dodge(width=0.9)
load("~/Me/Psychology/Projects/choicesets/with_sam/data/cs_wg_v10/real2/analysis.rdata")
weights = c(3.50e-07,3.44e-08,9.48e-01,2.25e-01,9.28e-02,1.24e-01,3.44e-01,1.45e-01,1.43e-08,2.66e-01,8.69e-09,4.77e-01,9.58e-08,1.14e-07,1.15e-01,3.67e-08,2.55e-08,2.65e-07,3.68e-01,3.92e-06,3.95e-07,1.93e-01,4.03e-01,7.26e-07,7.08e-01,2.80e-01,3.59e-08,1.13e-07,1.67e-07,6.90e-08,3.72e-01,2.55e-01,4.31e-01,1.08e-07,2.89e-01,01,1.38e-07,4.27e-01,3.38e-08,6.90e-02,8.02e-03,1.43e-01,2.17e-06,2.47e-01,6.29e-01,2.33e-01,1.19e-01,2.68e-01,6.34e-01,2.24e-01,4.28e-02,2.79e-01,5.12e-02,7.87e-02,3.88e-01,1.61e-01,5.67e-01,4.95e-01,4.21e-01,1.83e-01,5.62e-08,1.27e-07,1.47e-06,6.91e-08,5.67e-09,8.57e-09,2.73e-02,1.08e-02,6.78e-02,5.77e-08,3.94e-01,5.22e-07,8.20e-07,1.21e-06,3.62e-01,2.53e-01,1.14e-07,2.95e-01,4.92e-08,1.29e-01,7.44e-08,1.59e-07,4.87e-01,8.01e-08,4.64e-01,1.14e-07,5.95e-01,7.12e-09,3.01e-01,2.27e-07,1.52e-08,3.02e-08,3.02e-02,8.73e-02,1.88e-01,2.35e-08,3.38e-01,2.82e-07,2.64e-01,3.77e-01,2.80e-01,1.42e-01,3.21e-01,1.46e-01,4.17e-08,1.78e-01,2.15e-01,6.72e-08,7.92e-07,1.02e-07,9.83e-07,3.02e-01,1.08e-07,4.79e-01,4.77e-02,2.12e-05,2.10e-07,1.38e-07,1.56e-01,2.38e-01,3.92e-01,4.03e-08,6.49e-08,8.40e-01,8.09e-01,1.00e-07,3.28e-01,1.01e-01,3.37e-01,5.18e-07,3.75e-01,5.48e-01,5.91e-09,1.33e-02,6.04e-08,1.10e-02,5.41e-08,2.69e-01,6.46e-08,1.35e-07,1.17e-06,2.22e-07,4.97e-01,8.30e-08,1.16e-08,3.28e-07,2.93e-01,2.21e-01,9.98e-01,4.62e-02,4.86e-08,2.65e-01,2.63e-01,1.26e-07,2.54e-01,1.00e+00,4.20e-01,7.81e-08,6.02e-07,6.90e-08,5.41e-09,7.84e-02,3.92e-08,2.20e-08,1.23e-07,3.62e-07,9.85e-01,3.74e-01,3.54e-01,1.93e-08,8.32e-08,7.02e-08,9.14e-01,01,7.75e-02,2.70e-07,1.38e-01,4.91e-01,4.44e-08,3.10e-01,1.81e-01,1.89e-06,1.55e-01,5.44e-01,1.33e-06,1.51e-07,2.29e-07,1.23e-01,1.33e-01,5.01e-01,3.22e-01,7.81e-09,2.33e-08,5.10e-01,1.19e-07,4.00e-07,2.66e-01,8.11e-02,6.06e-02,3.41e-01,1.24e-01,4.40e-01,5.54e-01,5.30e-02,3.34e-01)
cor.test(df.cor.pressure$poss_measure, weights)
length(weights)
weights_pressure = weights[df.cor$time_cond == 'pressure']
cor.test(df.cor.pressure$poss_measure, weights)
length(weights_pressure)
length(df.cor.pressure$poss_measure)
cor.test(df.cor.pressure$poss_measure, weights_pressure)
cor.test(df.cor.pressure$s2_measure, weights_pressure)
m.cor$weights = weights
df.cor$weights = weights
m.cor2 = lm(weights ~ poss_measure * time_cond, data = df.cor)
summary(m.cor2)
View(df.s2.filt)
View(df.s1.filt)
View(df.poss)
View(df.cor)
plot(weights ~ poss_measure, data = df.cor)
cor.test(df.cor.pressure$poss_measure, df.cor.pressure$weights)
numGoodSubj = length(include_names)
df.cor = data.frame(poss_measure = numeric(numGoodSubj), s2_measure = numeric(numGoodSubj), time_cond = factor(numGoodSubj))
df.cor$poss_measure = df.poss.subj.filt$val
df.cor$s2_measure = df.s2.subj.filt$s1_val_high
df.cor$time_cond = df.poss.subj.filt$cond
df.cor$weights = c(3.50e-07,3.44e-08,9.48e-01,2.25e-01,9.28e-02,1.24e-01,3.44e-01,1.45e-01,1.43e-08,2.66e-01,8.69e-09,4.77e-01,9.58e-08,1.14e-07,1.15e-01,3.67e-08,2.55e-08,2.65e-07,3.68e-01,3.92e-06,3.95e-07,1.93e-01,4.03e-01,7.26e-07,7.08e-01,2.80e-01,3.59e-08,1.13e-07,1.67e-07,6.90e-08,3.72e-01,2.55e-01,4.31e-01,1.08e-07,2.89e-01,01,1.38e-07,4.27e-01,3.38e-08,6.90e-02,8.02e-03,1.43e-01,2.17e-06,2.47e-01,6.29e-01,2.33e-01,1.19e-01,2.68e-01,6.34e-01,2.24e-01,4.28e-02,2.79e-01,5.12e-02,7.87e-02,3.88e-01,1.61e-01,5.67e-01,4.95e-01,4.21e-01,1.83e-01,5.62e-08,1.27e-07,1.47e-06,6.91e-08,5.67e-09,8.57e-09,2.73e-02,1.08e-02,6.78e-02,5.77e-08,3.94e-01,5.22e-07,8.20e-07,1.21e-06,3.62e-01,2.53e-01,1.14e-07,2.95e-01,4.92e-08,1.29e-01,7.44e-08,1.59e-07,4.87e-01,8.01e-08,4.64e-01,1.14e-07,5.95e-01,7.12e-09,3.01e-01,2.27e-07,1.52e-08,3.02e-08,3.02e-02,8.73e-02,1.88e-01,2.35e-08,3.38e-01,2.82e-07,2.64e-01,3.77e-01,2.80e-01,1.42e-01,3.21e-01,1.46e-01,4.17e-08,1.78e-01,2.15e-01,6.72e-08,7.92e-07,1.02e-07,9.83e-07,3.02e-01,1.08e-07,4.79e-01,4.77e-02,2.12e-05,2.10e-07,1.38e-07,1.56e-01,2.38e-01,3.92e-01,4.03e-08,6.49e-08,8.40e-01,8.09e-01,1.00e-07,3.28e-01,1.01e-01,3.37e-01,5.18e-07,3.75e-01,5.48e-01,5.91e-09,1.33e-02,6.04e-08,1.10e-02,5.41e-08,2.69e-01,6.46e-08,1.35e-07,1.17e-06,2.22e-07,4.97e-01,8.30e-08,1.16e-08,3.28e-07,2.93e-01,2.21e-01,9.98e-01,4.62e-02,4.86e-08,2.65e-01,2.63e-01,1.26e-07,2.54e-01,1.00e+00,4.20e-01,7.81e-08,6.02e-07,6.90e-08,5.41e-09,7.84e-02,3.92e-08,2.20e-08,1.23e-07,3.62e-07,9.85e-01,3.74e-01,3.54e-01,1.93e-08,8.32e-08,7.02e-08,9.14e-01,01,7.75e-02,2.70e-07,1.38e-01,4.91e-01,4.44e-08,3.10e-01,1.81e-01,1.89e-06,1.55e-01,5.44e-01,1.33e-06,1.51e-07,2.29e-07,1.23e-01,1.33e-01,5.01e-01,3.22e-01,7.81e-09,2.33e-08,5.10e-01,1.19e-07,4.00e-07,2.66e-01,8.11e-02,6.06e-02,3.41e-01,1.24e-01,4.40e-01,5.54e-01,5.30e-02,3.34e-01)
df.cor.pressure = df.cor %>% filter(time_cond == 'pressure')
cor.test(df.cor.pressure$poss_measure, df.cor.pressure$weights)
plot(weights ~ poss_measure, data = df.cor.pressure)
cor.test(coefs, df.cor$weights) # people who said low-val words were more impossible more also put high-val words earlier
df.cor$coefs = coef(m.order)$subject$s1_val_highTRUE
df.cor.pressure = df.cor %>% filter(time_cond == 'pressure')
cor.test(df.cor$coefs, df.cor$s2_measure) # people who chose high s1 words more also put high-val words earlier
cor.test(df.cor$coefs, df.cor$poss_measure) # people who said low-val words were more impossible more also put high-val words earlier
cor.test(df.cor.pressure$coefs, df.cor.pressure$poss_measure) # people who said low-val words were more impossible more also put high-val words earlier
cor.test(df.cor$coefs, df.cor$poss_measure) # people who said low-val words were more impossible more also put high-val words earlier
cor.test(df.cor$coefs, df.cor$weights) # people who said low-val words were more impossible more also put high-val words earlier
df.poss.subj.filt = df.poss.collapsed.filt %>% group_by(subject, cond) %>%
summarize(val = choice[s1_value == 'low'] - choice[s1_value == 'high'], val2 = choice[s1_value == 'low'])
df.cor = data.frame(poss_measure = numeric(numGoodSubj), s2_measure = numeric(numGoodSubj), time_cond = factor(numGoodSubj))
df.cor$poss_measure = df.poss.subj.filt$val
df.cor$s2_measure = df.s2.subj.filt$s1_val_high
df.cor$time_cond = df.poss.subj.filt$cond
df.cor$weights = c(3.50e-07,3.44e-08,9.48e-01,2.25e-01,9.28e-02,1.24e-01,3.44e-01,1.45e-01,1.43e-08,2.66e-01,8.69e-09,4.77e-01,9.58e-08,1.14e-07,1.15e-01,3.67e-08,2.55e-08,2.65e-07,3.68e-01,3.92e-06,3.95e-07,1.93e-01,4.03e-01,7.26e-07,7.08e-01,2.80e-01,3.59e-08,1.13e-07,1.67e-07,6.90e-08,3.72e-01,2.55e-01,4.31e-01,1.08e-07,2.89e-01,01,1.38e-07,4.27e-01,3.38e-08,6.90e-02,8.02e-03,1.43e-01,2.17e-06,2.47e-01,6.29e-01,2.33e-01,1.19e-01,2.68e-01,6.34e-01,2.24e-01,4.28e-02,2.79e-01,5.12e-02,7.87e-02,3.88e-01,1.61e-01,5.67e-01,4.95e-01,4.21e-01,1.83e-01,5.62e-08,1.27e-07,1.47e-06,6.91e-08,5.67e-09,8.57e-09,2.73e-02,1.08e-02,6.78e-02,5.77e-08,3.94e-01,5.22e-07,8.20e-07,1.21e-06,3.62e-01,2.53e-01,1.14e-07,2.95e-01,4.92e-08,1.29e-01,7.44e-08,1.59e-07,4.87e-01,8.01e-08,4.64e-01,1.14e-07,5.95e-01,7.12e-09,3.01e-01,2.27e-07,1.52e-08,3.02e-08,3.02e-02,8.73e-02,1.88e-01,2.35e-08,3.38e-01,2.82e-07,2.64e-01,3.77e-01,2.80e-01,1.42e-01,3.21e-01,1.46e-01,4.17e-08,1.78e-01,2.15e-01,6.72e-08,7.92e-07,1.02e-07,9.83e-07,3.02e-01,1.08e-07,4.79e-01,4.77e-02,2.12e-05,2.10e-07,1.38e-07,1.56e-01,2.38e-01,3.92e-01,4.03e-08,6.49e-08,8.40e-01,8.09e-01,1.00e-07,3.28e-01,1.01e-01,3.37e-01,5.18e-07,3.75e-01,5.48e-01,5.91e-09,1.33e-02,6.04e-08,1.10e-02,5.41e-08,2.69e-01,6.46e-08,1.35e-07,1.17e-06,2.22e-07,4.97e-01,8.30e-08,1.16e-08,3.28e-07,2.93e-01,2.21e-01,9.98e-01,4.62e-02,4.86e-08,2.65e-01,2.63e-01,1.26e-07,2.54e-01,1.00e+00,4.20e-01,7.81e-08,6.02e-07,6.90e-08,5.41e-09,7.84e-02,3.92e-08,2.20e-08,1.23e-07,3.62e-07,9.85e-01,3.74e-01,3.54e-01,1.93e-08,8.32e-08,7.02e-08,9.14e-01,01,7.75e-02,2.70e-07,1.38e-01,4.91e-01,4.44e-08,3.10e-01,1.81e-01,1.89e-06,1.55e-01,5.44e-01,1.33e-06,1.51e-07,2.29e-07,1.23e-01,1.33e-01,5.01e-01,3.22e-01,7.81e-09,2.33e-08,5.10e-01,1.19e-07,4.00e-07,2.66e-01,8.11e-02,6.06e-02,3.41e-01,1.24e-01,4.40e-01,5.54e-01,5.30e-02,3.34e-01)
df.cor$weights = c(3.50e-07,3.44e-08,9.48e-01,2.25e-01,9.28e-02,1.24e-01,3.44e-01,1.45e-01,1.43e-08,2.66e-01,8.69e-09,4.77e-01,9.58e-08,1.14e-07,1.15e-01,3.67e-08,2.55e-08,2.65e-07,3.68e-01,3.92e-06,3.95e-07,1.93e-01,4.03e-01,7.26e-07,7.08e-01,2.80e-01,3.59e-08,1.13e-07,1.67e-07,6.90e-08,3.72e-01,2.55e-01,4.31e-01,1.08e-07,2.89e-01,01,1.38e-07,4.27e-01,3.38e-08,6.90e-02,8.02e-03,1.43e-01,2.17e-06,2.47e-01,6.29e-01,2.33e-01,1.19e-01,2.68e-01,6.34e-01,2.24e-01,4.28e-02,2.79e-01,5.12e-02,7.87e-02,3.88e-01,1.61e-01,5.67e-01,4.95e-01,4.21e-01,1.83e-01,5.62e-08,1.27e-07,1.47e-06,6.91e-08,5.67e-09,8.57e-09,2.73e-02,1.08e-02,6.78e-02,5.77e-08,3.94e-01,5.22e-07,8.20e-07,1.21e-06,3.62e-01,2.53e-01,1.14e-07,2.95e-01,4.92e-08,1.29e-01,7.44e-08,1.59e-07,4.87e-01,8.01e-08,4.64e-01,1.14e-07,5.95e-01,7.12e-09,3.01e-01,2.27e-07,1.52e-08,3.02e-08,3.02e-02,8.73e-02,1.88e-01,2.35e-08,3.38e-01,2.82e-07,2.64e-01,3.77e-01,2.80e-01,1.42e-01,3.21e-01,1.46e-01,4.17e-08,1.78e-01,2.15e-01,6.72e-08,7.92e-07,1.02e-07,9.83e-07,3.02e-01,1.08e-07,4.79e-01,4.77e-02,2.12e-05,2.10e-07,1.38e-07,1.56e-01,2.38e-01,3.92e-01,4.03e-08,6.49e-08,8.40e-01,8.09e-01,1.00e-07,3.28e-01,1.01e-01,3.37e-01,5.18e-07,3.75e-01,5.48e-01,5.91e-09,1.33e-02,6.04e-08,1.10e-02,5.41e-08,2.69e-01,6.46e-08,1.35e-07,1.17e-06,2.22e-07,4.97e-01,8.30e-08,1.16e-08,3.28e-07,2.93e-01,2.21e-01,9.98e-01,4.62e-02,4.86e-08,2.65e-01,2.63e-01,1.26e-07,2.54e-01,1.00e+00,4.20e-01,7.81e-08,6.02e-07,6.90e-08,5.41e-09,7.84e-02,3.92e-08,2.20e-08,1.23e-07,3.62e-07,9.85e-01,3.74e-01,3.54e-01,1.93e-08,8.32e-08,7.02e-08,9.14e-01,01,7.75e-02,2.70e-07,1.38e-01,4.91e-01,4.44e-08,3.10e-01,1.81e-01,1.89e-06,1.55e-01,5.44e-01,1.33e-06,1.51e-07,2.29e-07,1.23e-01,1.33e-01,5.01e-01,3.22e-01,7.81e-09,2.33e-08,5.10e-01,1.19e-07,4.00e-07,2.66e-01,8.11e-02,6.06e-02,3.41e-01,1.24e-01,4.40e-01,5.54e-01,5.30e-02,3.34e-01);
# test correlations
cor.test(df.cor.pressure$poss_measure, df.cor.pressure$weights)
df.cor$poss_measure = df.poss.subj.filt$val2
df.cor.pressure = df.cor %>% filter(time_cond == 'pressure')
# test correlations
cor.test(df.cor.pressure$poss_measure, df.cor.pressure$weights)
m.cor = lm(weights ~ poss_measure * time_cond, data = df.cor)
plot(poss_measure ~ weights, data = df.cor.pressure)
cor.test(df.cor.pressure$s2_measure, df.cor.pressure$poss_measure)
# test correlations
cor.test(df.cor.pressure$poss_measure, df.cor.pressure$weights)
numGoodSubj = length(include_names)
df.cor = data.frame(poss_measure = numeric(numGoodSubj), s2_measure = numeric(numGoodSubj), time_cond = factor(numGoodSubj))
df.cor$poss_measure = df.poss.subj.filt$val
df.cor$s2_measure = df.s2.subj.filt$s1_val_high
df.cor$time_cond = df.poss.subj.filt$cond
df.cor$weights = c(3.50e-07,3.44e-08,9.48e-01,2.25e-01,9.28e-02,1.24e-01,3.44e-01,1.45e-01,1.43e-08,2.66e-01,8.69e-09,4.77e-01,9.58e-08,1.14e-07,1.15e-01,3.67e-08,2.55e-08,2.65e-07,3.68e-01,3.92e-06,3.95e-07,1.93e-01,4.03e-01,7.26e-07,7.08e-01,2.80e-01,3.59e-08,1.13e-07,1.67e-07,6.90e-08,3.72e-01,2.55e-01,4.31e-01,1.08e-07,2.89e-01,01,1.38e-07,4.27e-01,3.38e-08,6.90e-02,8.02e-03,1.43e-01,2.17e-06,2.47e-01,6.29e-01,2.33e-01,1.19e-01,2.68e-01,6.34e-01,2.24e-01,4.28e-02,2.79e-01,5.12e-02,7.87e-02,3.88e-01,1.61e-01,5.67e-01,4.95e-01,4.21e-01,1.83e-01,5.62e-08,1.27e-07,1.47e-06,6.91e-08,5.67e-09,8.57e-09,2.73e-02,1.08e-02,6.78e-02,5.77e-08,3.94e-01,5.22e-07,8.20e-07,1.21e-06,3.62e-01,2.53e-01,1.14e-07,2.95e-01,4.92e-08,1.29e-01,7.44e-08,1.59e-07,4.87e-01,8.01e-08,4.64e-01,1.14e-07,5.95e-01,7.12e-09,3.01e-01,2.27e-07,1.52e-08,3.02e-08,3.02e-02,8.73e-02,1.88e-01,2.35e-08,3.38e-01,2.82e-07,2.64e-01,3.77e-01,2.80e-01,1.42e-01,3.21e-01,1.46e-01,4.17e-08,1.78e-01,2.15e-01,6.72e-08,7.92e-07,1.02e-07,9.83e-07,3.02e-01,1.08e-07,4.79e-01,4.77e-02,2.12e-05,2.10e-07,1.38e-07,1.56e-01,2.38e-01,3.92e-01,4.03e-08,6.49e-08,8.40e-01,8.09e-01,1.00e-07,3.28e-01,1.01e-01,3.37e-01,5.18e-07,3.75e-01,5.48e-01,5.91e-09,1.33e-02,6.04e-08,1.10e-02,5.41e-08,2.69e-01,6.46e-08,1.35e-07,1.17e-06,2.22e-07,4.97e-01,8.30e-08,1.16e-08,3.28e-07,2.93e-01,2.21e-01,9.98e-01,4.62e-02,4.86e-08,2.65e-01,2.63e-01,1.26e-07,2.54e-01,1.00e+00,4.20e-01,7.81e-08,6.02e-07,6.90e-08,5.41e-09,7.84e-02,3.92e-08,2.20e-08,1.23e-07,3.62e-07,9.85e-01,3.74e-01,3.54e-01,1.93e-08,8.32e-08,7.02e-08,9.14e-01,01,7.75e-02,2.70e-07,1.38e-01,4.91e-01,4.44e-08,3.10e-01,1.81e-01,1.89e-06,1.55e-01,5.44e-01,1.33e-06,1.51e-07,2.29e-07,1.23e-01,1.33e-01,5.01e-01,3.22e-01,7.81e-09,2.33e-08,5.10e-01,1.19e-07,4.00e-07,2.66e-01,8.11e-02,6.06e-02,3.41e-01,1.24e-01,4.40e-01,5.54e-01,5.30e-02,3.34e-01)
# order
histogram(~ order | s1_val_high, df.words.filt[df.words.filt$recall == T, ])
m.order = lmer(order ~ s1_val_high + (1 | subject) + (0 + s1_val_high | subject) + (s1_val_high | word),
data = df.words.filt[df.words.filt$recall == T, ])
summary(m.order)
df.cor$coefs = coef(m.order)$subject$s1_val_highTRUE
df.cor.pressure = df.cor %>% filter(time_cond == 'pressure')
# test correlations
cor.test(df.cor.pressure$poss_measure, df.cor.pressure$weights)
m.cor = lm(weights ~ poss_measure * time_cond, data = df.cor)
summary(m.cor)
numRealQuestions = numQuestions - 1
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 13
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFhigh - mean(MFhigh), MBcent = MBhigh - mean(MBhigh), Int = MFcent * MBcent,
nChosen_cent = nChosen - mean(nChosen))
# mlogit ------------------------------------------------------------------
## Prepare for mlogit
numRealQuestions = 8
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 13
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col, Choice2 = Choice2.col, nExposures = nExposures.col,
Recall = Recalled.col, nChosen = numChosen.col, Question = Question.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFhigh - mean(MFhigh), MBcent = MBhigh - mean(MBhigh), Int = MFcent * MBcent,
nChosen_cent = nChosen - mean(nChosen))
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$high_val[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 13
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col, Choice2 = Choice2.col,
Recall = Recalled.col))
}
}
i
subj
Subj.col
Trial.col
OptionID
OptionID.col
Choice.col
MFval.col
MBval.col
MFhigh.col
MBhigh.col
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$s1_value_high[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 13
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col, Choice2 = Choice2.col,
Recall = Recalled.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFhigh - mean(MFhigh), MBcent = MBhigh - mean(MBhigh), Int = MFcent * MBcent,
nChosen_cent = nChosen - mean(nChosen))
MFhigh.col
df.logit = data.frame(Subj = NULL, Trial = NULL, OptionID = NULL, Choice = NULL, MFval = NULL, MBval = NULL, nExposures = NULL, Recalled = NULL, Question = NULL)
for (subj in 1:nrow(df.demo)) {
subj.name = df.demo$subject[subj]
recalled.temp = recalled_ever[subj, ]
#recalled.temp = !logical(numWords)
num.recalled.temp = sum(recalled.temp)
df.words.temp = df.words %>% filter(subject == subj.name)
df.s2.temp = df.s2 %>% filter(subject == subj.name) %>% arrange(question_order)
nAnswered = sum(!is.na(df.s2.temp$choice_real_ind))
if (nAnswered > 0 & subj.name %in% include_names) {
Subj.col = rep(subj, num.recalled.temp * nAnswered)
MFval.col = rep(df.words.temp$value[recalled.temp], nAnswered)
MFhigh.col = rep(df.words.temp$s1_val_high[recalled.temp] * 1, nAnswered)
nExposures.col = rep(df.words.temp$exposures[recalled.temp], nAnswered)
Recalled.col = rep(df.words.temp$recall.ever[recalled.temp] * 1, nAnswered)
numChosen.col = rep(df.words.temp$numChosen_high[recalled.temp], nAnswered)
#OptionID.col = rep(which(recalled.temp), nAnswered)
OptionID.col = rep(1:num.recalled.temp, nAnswered)
Trial.col = rep(1:nAnswered, each = num.recalled.temp)
Question.col = rep(df.s2.temp$question_ind[!is.na(df.s2.temp$choice_real_ind)], each = num.recalled.temp)
temp.mbval = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.mbhigh = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
temp.choice2 = matrix(0, nrow = nAnswered, ncol = num.recalled.temp)
ind = 1
for (q in 1:numRealQuestions) {
if (!is.na(df.s2.temp$choice_real_ind[q])) {
all_vals = as.numeric.vector(df.s2.temp$all_values[q])
mbvals = rank(all_vals, ties.method = 'max')
#mbvals = all_vals
temp.mbval[ind,] = mbvals[recalled.temp]
temp.mbhigh[ind,] = mbvals[recalled.temp] > 13
choice = logical(num.recalled.temp)
choice[which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))] = TRUE
temp.choice[ind,] = choice
choice2 = vector(mode = 'numeric', num.recalled.temp)
#choice2[1] = which(df.s2.temp$choice_real_ind[q] == which(recalled.temp))
choice2[1] = OptionID.col[1:num.recalled.temp][choice]
temp.choice2[ind,] = choice2
ind = ind + 1
}
}
MBval.col = as.vector(t(temp.mbval))
MBhigh.col = as.vector(t(temp.mbhigh))
Choice.col = as.vector(t(temp.choice))
Choice2.col = as.vector(t(temp.choice2))
df.logit = rbind(df.logit,
data.frame(Subj = Subj.col, Trial = Trial.col, OptionID = OptionID.col, Choice = Choice.col,
MFval = MFval.col, MBval = MBval.col, MFhigh = MFhigh.col, MBhigh = MBhigh.col, Choice2 = Choice2.col,
Recall = Recalled.col))
}
}
df.logit = df.logit %>% mutate(MFcent = MFhigh - mean(MFhigh), MBcent = MBhigh - mean(MBhigh), Int = MFcent * MBcent,
nChosen_cent = nChosen - mean(nChosen))
df.logit = df.logit %>% mutate(MFcent = MFhigh - mean(MFhigh), MBcent = MBhigh - mean(MBhigh), Int = MFcent * MBcent)
df.sum = df.logit %>% group_by(MFhigh,MBhigh) %>% summarize(Choice.mean = mean(Choice)) #%>% mutate(Choice.mean = Choice.mean * ifelse(MFval %in% c(0,10), 2/3, 1))
ggplot(data = df.sum, aes(x = MBhigh, y = Choice.mean, group = MFhigh, colour = MFhigh)) +
geom_point(aes(size = 2)) + geom_line()
m.real = runLogit(df.logit)
runLogit = function(df) {
df$Choice = as.logical(df$Choice)
df$OptionID = factor(df$OptionID)
df = df %>% mutate(Trial_unique = paste(Subj, Trial, sep="_"))
df$Trial = factor(df$Trial)
df$Trial_unique = factor(df$Trial_unique)
df$Subj = factor(df$Subj)
df.m = mlogit.data(df, choice = "Choice", shape = "long", id.var = "Subj", alt.var = "OptionID", chid.var = "Trial_unique")
m = mlogit(Choice ~ MFcent + MBcent + Int | -1, df.m, panel = T,
rpar = c(MFcent = "n", MBcent = "n", Int = 'n'), correlation = F, halton = NA, R = 1000, tol = .001)
return(m)
}
m.real = runLogit(df.logit)
summary(m.real)
df.cor$weights2 = c(-1.38e+00,-9.52e-01,1.93e+00,-6.06e-01,6.90e-02,-8.70e-02,7.13e-01,1.81e-01,-5.67e-01,2.70e-01,-7.34e-01,1.42e+00,-9.83e-01,-2.10e-02,4.60e-02,-2.69e+00,-3.34e+00,-5.42e-01,5.38e-01,00,-1.09e-01,3.58e-01,1.04e+00,00,1.87e+00,5.59e-01,-7.57e-01,-2.31e+00,-8.79e-01,-1.85e-01,1.19e+00,2.18e-01,8.81e-01,-6.34e-01,6.90e-02,1.11e+00,-6.19e-01,1.21e+00,-6.82e-01,-2.35e-01,-5.18e-01,1.90e-01,-5.64e-01,3.81e-01,1.36e+00,4.10e-01,-2.82e-01,2.06e-01,3.47e+00,1.84e-01,9.00e-03,2.43e-01,-1.50e-02,5.50e-02,9.66e-01,-3.16e-01,1.10e+00,1.01e+00,8.88e-01,2.58e-01,-1.95e+00,-3.68e-01,00,-1.96e-01,-1.52e+00,-1.65e+00,-1.22e-01,-2.48e-01,3.50e-02,00,7.90e-01,-6.60e-02,00,-4.62e-01,5.12e-01,4.48e-01,-6.64e-01,5.71e-01,-7.01e-01,1.77e-01,-4.16e-01,-1.05e+00,6.96e-01,-1.22e-01,01,00,2.89e+00,-7.28e-01,7.72e-01,-3.60e-02,-1.74e-02,-4.61e-01,-1.07e+00,6.30e-02,-4.73e-01,-1.92e+00,8.92e-01,-8.67e-01,3.88e-01,3.07e-01,8.61e-01,1.07e-01,7.98e-01,-6.14e-01,-8.50e-02,1.45e-01,3.27e-01,00,00,00,00,1.81e-01,-1.86e-01,8.41e-01,1.20e-02,-1.01e-01,-1.29e+00,-2.87e-01,1.46e-01,4.16e-01,1.29e+00,-8.70e-01,-1.10e-02,4.52e-01,6.01e-01,-1.00e-02,7.91e-01,-2.30e-01,3.10e-01,-9.00e-03,7.69e-01,2.32e+00,-6.63e-01,1.00e-03,-4.44e-01,1.00e-03,-3.49e-01,4.03e-01,00,00,00,00,1.63e+00,-2.20e-02,-3.89e-01,-1.86e-01,4.26e-01,2.89e-01,2.64e+00,-6.80e-02,-1.48e+00,4.21e-01,3.36e-01,-1.54e+00,2.95e-01,3.25e+00,9.15e-01,-8.34e-01,00,-5.00e-02,-1.80e+00,-1.87e-01,-1.89e+00,-1.97e-01,-4.20e-01,-5.90e-02,5.16e+00,7.24e-01,6.10e-01,-1.99e+00,-6.92e-01,-1.32e-01,3.57e+00,3.71e+00,-2.45e-01,-2.60e-02,-4.91e-01,1.21e+00,-1.00e-03,5.91e-01,2.53e-01,-5.81e-01,6.20e-02,1.21e+00,00,00,-1.00e-02,1.37e-01,-1.03e+00,1.54e+00,5.61e-01,-8.52e-01,-3.72e-01,1.26e+00,-8.39e-01,00,5.38e-01,3.10e-02,-6.50e-02,4.31e-01,-5.07e-01,8.27e-01,1.85e+00,-2.07e-01,3.49e-01)
df.cor.pressure = df.cor %>% filter(time_cond == 'pressure')
# test correlations
cor.test(df.cor.pressure$poss_measure, df.cor.pressure$weights2)
plot(poss_measure ~ weights2, data = df.cor.pressure)
df.cor$weights3 = c(0,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,0,1,1,0,1,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,0,1,0,1,1,0,1)
df.cor.pressure = df.cor %>% filter(time_cond == 'pressure')
m.cor = glm(weights2 ~ poss_measure * time_cond, data = df.cor, family = binomial)
m.cor = glm(weights3 ~ poss_measure * time_cond, data = df.cor, family = binomial)
summary(m.cor)
df.cor.pressure = df.cor %>% filter(time_cond == 'pressure')
# test correlations
cor.test(df.cor.pressure$poss_measure, df.cor.pressure$weights3)
