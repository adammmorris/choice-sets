function [results, results_long] = runModel(envInfo, params, onewordrule)
%% Get parameters
numWords = envInfo{1};
numTrials = envInfo{2};
rewards_te = envInfo{3};
maxRe_te = envInfo{4};
rewards_tr = envInfo{5};
maxRe_tr = envInfo{6};

numAgents = size(params, 1);

%% Run model
results = zeros(numAgents * numTrials, 7);
results_ind = 1;
results_long = zeros(numAgents * numTrials * numWords, 7);
results_long_ind = 1;

for agent = 1:numAgents
    nToEval = params(agent, 1);
    beta = params(agent, 2);
    w_MF = params(agent, 3);
    w_NE = params(agent, 4); % num exposures
    w_MB = 1 - w_MF - w_NE;
    
    nChosen = zeros(numWords, 1);
    chosen = false(numWords, 1);
    
    for trial = 1:numTrials
        availWords = 1:numWords;
        if onewordrule
            availWords(chosen) = [];
        end
        
        probs = exp(beta *
            (rewards_te(trial, availWords) * w_MB / maxRe_te +
                rewards_tr(agent, availWords, 1) * w_NE / maxRe_tr + 
                rewards_tr(agent, availWords, 1) * w_NE / maxRe_tr + ) / ...
            sum(exp(beta * (rewards_te(trial, availWords) * w_MB / maxRe_te + rewards_tr(agent, availWords, 1) * w_NE / maxRe_tr)));
        if nToEval == 1
            choice = availWords(fastrandsample(probs, 1));
        else
            % Get one-pass WRS with Efraimidis & Spirakis's method
            [~, options] = sort(exprnd(1, [1, length(availWords)]) ./ probs);
            toEval = options(1:nToEval);
            [~, choice_ind] = max(rewards_te(trial, availWords(toEval)));
            choice = availWords(toEval(choice_ind));
        end
        
        chosen(1:end) = false; % they just can't repeat words twice in a row
        chosen(choice) = true;
        
        if rewards_tr(agent, choice) > median(rewards_tr(agent, availWords)), mftop = 1;
        elseif rewards_tr(agent, choice) == median(rewards_tr(agent, availWords)), mftop = randi(2)-1;
        else mftop = 0;
        end
            
        if rewards_te(trial, choice) > median(rewards_te(trial, availWords)), mbtop = 1;
        elseif rewards_te(trial, choice) == median(rewards_te(trial, availWords)), mbtop = randi(2)-1;
        else mbtop = 0;
        end
        
        results(results_ind, :) = [agent trial choice rewards_tr(agent, choice) rewards_te(trial, choice) ...
            mftop mbtop];
        results_ind = results_ind + 1;
        
        for j = 1:numWords
            results_long(results_long_ind, :) = [agent trial j (choice == j) rewards_tr(agent, j) rewards_te(trial, j) nChosen(j)];
            results_long_ind = results_long_ind + 1;
        end
        
        nChosen(choice) = nChosen(choice) + 1;
    end
end